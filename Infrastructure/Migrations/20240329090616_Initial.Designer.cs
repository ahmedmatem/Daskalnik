// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240329090616_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "37256721-29f0-468d-8f79-776a2091592a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 29, 11, 6, 15, 174, DateTimeKind.Local).AddTicks(2003),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 29, 11, 6, 15, 177, DateTimeKind.Local).AddTicks(8988),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "bea5be04-87a0-4298-b97d-0656e0401e68",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 29, 11, 6, 15, 177, DateTimeKind.Local).AddTicks(9032),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "ee1b8894-3a77-4f85-a828-2f2a924a44d0",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 29, 11, 6, 15, 177, DateTimeKind.Local).AddTicks(9039),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "40ea7dc0-708f-41a1-b9ca-c3761f296183",
                            FullName = "baran gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37256721-29f0-468d-8f79-776a2091592a"
                        },
                        new
                        {
                            Id = "a6282758-b2f2-4416-8050-f5519428a71f",
                            FullName = "viktoriya gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e"
                        },
                        new
                        {
                            Id = "a0e1c528-a9b7-4f9d-a726-58685c755424",
                            FullName = "daniel gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e"
                        },
                        new
                        {
                            Id = "8ad09948-389f-4b73-a253-82fe0730f8b2",
                            FullName = "dimana gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e"
                        },
                        new
                        {
                            Id = "8a85ce06-658e-4ab1-8ca2-ea4ac2ebac6e",
                            FullName = "dimitar gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37256721-29f0-468d-8f79-776a2091592a"
                        },
                        new
                        {
                            Id = "7da83618-e7bf-4b65-9cda-c26f5b720606",
                            FullName = "emre gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "bea5be04-87a0-4298-b97d-0656e0401e68"
                        },
                        new
                        {
                            Id = "efc7ebb9-348f-4eb5-b49b-e7ac956b84b0",
                            FullName = "ivayla gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e"
                        },
                        new
                        {
                            Id = "b867a863-141a-4f9c-96ea-20e8154f8361",
                            FullName = "ivan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ee1b8894-3a77-4f85-a828-2f2a924a44d0"
                        },
                        new
                        {
                            Id = "efe63c4b-ce44-467d-b375-3f142545c9d8",
                            FullName = "ivan_ivanov gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37256721-29f0-468d-8f79-776a2091592a"
                        },
                        new
                        {
                            Id = "0088b70c-dac4-4d48-a353-3637e648d879",
                            FullName = "dimitar_barlev gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ee1b8894-3a77-4f85-a828-2f2a924a44d0"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "2aee729b-b0fe-4caf-a3e2-554b01d63f1e",
                            FullName = "turhan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ee1b8894-3a77-4f85-a828-2f2a924a44d0"
                        },
                        new
                        {
                            Id = "f13e7f5d-40f1-4de2-91e7-5b9af7d129bd",
                            FullName = "venci gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37256721-29f0-468d-8f79-776a2091592a"
                        },
                        new
                        {
                            Id = "faad3f22-8281-4391-95e5-60ecd8a6f346",
                            FullName = "ahmed gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37256721-29f0-468d-8f79-776a2091592a"
                        },
                        new
                        {
                            Id = "829dd445-ad09-4399-acc2-bc2da4523ee6",
                            FullName = "martin gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c1b673c4-6a10-4bdb-b267-4ab8bd29ca3e"
                        },
                        new
                        {
                            Id = "78a30368-8be4-46c7-a064-241e300685f6",
                            FullName = "desi gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ee1b8894-3a77-4f85-a828-2f2a924a44d0"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creater of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "095e9c5b-d240-4c65-883f-1d31eac8484f",
                            ConcurrencyStamp = "095e9c5b-d240-4c65-883f-1d31eac8484f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a77bf21e-99b8-4c37-b9df-6a29c807b004",
                            ConcurrencyStamp = "a77bf21e-99b8-4c37-b9df-6a29c807b004",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "211a9447-eaaa-467a-a816-e52c7d0d23d6",
                            ConcurrencyStamp = "211a9447-eaaa-467a-a816-e52c7d0d23d6",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aca7ea8c-0c20-4248-8bdc-d079dea3088b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc6456c5-262c-476b-86f6-77b9b797a1cc",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPaIbPCMlAOiEwwS+SLSmQY8wkrNwDvV/Rh8ZkrSVeVSnvEQKxZ9IL/yJPaaRbf60Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab88db71-97e9-41ad-b9a7-3dee4492e862",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2aee729b-b0fe-4caf-a3e2-554b01d63f1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b231fc75-61e5-4c02-aa40-d03630b0d556",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbvLwGq8wqHJWXc1A+1RXkgZJ3X5daO84cDHsINyIWGqIGAjiM+jQNsAMgZSflTQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db807f0c-0f51-402b-837e-2e6a57d3e3a8",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com"
                        },
                        new
                        {
                            Id = "f13e7f5d-40f1-4de2-91e7-5b9af7d129bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64401e39-2863-4222-9534-c706f48abe5f",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEClc9bX3+tXHxt7JZ6FIAwJ48XwhX12RB3CvbXZK+X7pwZojgaeZD5aH5G/+DEL0gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77d7ed06-6ad7-4fbc-8992-d1cda8ab9567",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com"
                        },
                        new
                        {
                            Id = "faad3f22-8281-4391-95e5-60ecd8a6f346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e39f986f-ebdc-4418-bbd7-4cbae618197a",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFFwkha25IGjj4JcowikPgy9zxfKNGT5HhJFvY8HkTzMDx56Iy5BkUhLFy0AIKc5kA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9356b845-7ba2-4ed5-830a-09fa298368e0",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "829dd445-ad09-4399-acc2-bc2da4523ee6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b210ca0-970f-41c3-98d2-7a023a1cbf76",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJKIeD0lHn4KYLgkS0kvV/kS0kZyqH3VWUZpcdRndtc8TW/Qu2bUVXAiYrisXpYSjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05a647bb-3979-4405-bff8-2dde7e6f07a5",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com"
                        },
                        new
                        {
                            Id = "78a30368-8be4-46c7-a064-241e300685f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7939ab11-f60e-4539-bc9f-ba115e9af02c",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHR2YuFE6PNi9ufhEnB4RSswGx8807urDc0WPFRYxBPJduea1RQFzWneAnwde+fq2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3b3b0c2-0532-4179-9c52-6eb819d93ae8",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com"
                        },
                        new
                        {
                            Id = "40ea7dc0-708f-41a1-b9ca-c3761f296183",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ab37d53-dd6c-45e4-b92e-402a44ce18e3",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDYmUvFl+aENzk76yVjCvKt/b/lmwhCJDi8V/eii+qSgsqatHyAP01U5fqMpo0PLhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c008041e-9aec-47e5-9f64-237e91cb97b6",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com"
                        },
                        new
                        {
                            Id = "a6282758-b2f2-4416-8050-f5519428a71f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ab24cff-c34d-4639-8394-10c56605b6e0",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDfd4EpwqHPZgFFPJj3HZ/pXc5EJURMlLdfuVLQvRc6P1RqaguWF2623+esTVtszbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0705277-287a-48ca-afc2-288b4160072b",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com"
                        },
                        new
                        {
                            Id = "a0e1c528-a9b7-4f9d-a726-58685c755424",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b394274b-6c00-439d-b98f-870dd1036879",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGieFZFEvAEgFU8F1rArmtpwq+q2JsnlEhwP/Q87puKAUHQ8Nmqtrnnzk3uSh7YkiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8868bea7-5090-47e0-8a60-5c0316284cf5",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com"
                        },
                        new
                        {
                            Id = "8ad09948-389f-4b73-a253-82fe0730f8b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7eda74ca-909a-4081-8f16-326ad1a46404",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMf0VuoPrFbnmFJhqcJjV9xq+n9UP8IfZkXgMoWzMGurFWyPCnL3N5bwPu9BafHFTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f261856e-adaa-45e3-b258-330272a0017f",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com"
                        },
                        new
                        {
                            Id = "8a85ce06-658e-4ab1-8ca2-ea4ac2ebac6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "944eb59e-4dd5-40c8-a5eb-c9f7cf03815a",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1u7DdUi7h8uoj6gN9d5hLNLPxIQQwHIYezdfJ+Yt121Rk9YbAs97zSQ1Iui8UnBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15c82362-96e7-4fb8-a343-aeece1e47110",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com"
                        },
                        new
                        {
                            Id = "7da83618-e7bf-4b65-9cda-c26f5b720606",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4b50fb7-e5e5-4a05-b950-0095cabac86e",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELyx1TaERu/pYdrr6mCKn1GWCn9BG/GuHhhFsgOe1n5gAm709OB/HQcxlNblnOLbSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9df3b23-c954-480c-bfe4-a5fae5bb332f",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com"
                        },
                        new
                        {
                            Id = "efc7ebb9-348f-4eb5-b49b-e7ac956b84b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce20e91f-ea40-4615-8d3d-1933e41db139",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBP/zSh9J1G+As1trHjWlHKdn6qceSe/IOMINnL6D8gAzprQ2ltA3K3ZC4LU4X3Xzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e1b19f6-8523-4daa-98e0-d1cbfb58dbb4",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com"
                        },
                        new
                        {
                            Id = "b867a863-141a-4f9c-96ea-20e8154f8361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92f3aeab-a901-47b1-b051-e105ab8c72c4",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFlUCrk2mq+OnCv4x2XHjPN70RpBSTZsi+XLWXZY3RqTtpcCIUbt+/WwMofcOR8iSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d56dc7a-14b4-4aef-9979-7f1bdb2757f8",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com"
                        },
                        new
                        {
                            Id = "efe63c4b-ce44-467d-b375-3f142545c9d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb598594-0408-4eef-924f-a5c4eb20d384",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIH9zSwYvBBE4sWhYoiX90N68zRvMbu9jNoYQmhchXu5aVKEyPdcT7AQiA/wpB/N6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f377e3d-e33b-4fde-a485-2fa07190a80d",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "0088b70c-dac4-4d48-a353-3637e648d879",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0c8e86e-7fa9-48f5-860f-81dccf367a9a",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4qO0q58vY6IWXx0FTi1Y3vm2LldHCvGZlQBWIyI4/UQTQ8I2lhAeaJfdxx/v3Tzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce4e270e-1961-4b4e-94cb-6264d2a533b2",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "aca7ea8c-0c20-4248-8bdc-d079dea3088b",
                            RoleId = "095e9c5b-d240-4c65-883f-1d31eac8484f"
                        },
                        new
                        {
                            UserId = "2aee729b-b0fe-4caf-a3e2-554b01d63f1e",
                            RoleId = "211a9447-eaaa-467a-a816-e52c7d0d23d6"
                        },
                        new
                        {
                            UserId = "f13e7f5d-40f1-4de2-91e7-5b9af7d129bd",
                            RoleId = "211a9447-eaaa-467a-a816-e52c7d0d23d6"
                        },
                        new
                        {
                            UserId = "faad3f22-8281-4391-95e5-60ecd8a6f346",
                            RoleId = "211a9447-eaaa-467a-a816-e52c7d0d23d6"
                        },
                        new
                        {
                            UserId = "829dd445-ad09-4399-acc2-bc2da4523ee6",
                            RoleId = "211a9447-eaaa-467a-a816-e52c7d0d23d6"
                        },
                        new
                        {
                            UserId = "78a30368-8be4-46c7-a064-241e300685f6",
                            RoleId = "211a9447-eaaa-467a-a816-e52c7d0d23d6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

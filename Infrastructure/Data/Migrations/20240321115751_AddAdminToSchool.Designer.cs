// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321115751_AddAdminToSchool")]
    partial class AddAdminToSchool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Group name.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "52267193-578e-4b44-8bab-f66c098b7256",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 21, 13, 57, 49, 567, DateTimeKind.Local).AddTicks(4613),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "ae4f0260-b72b-46bd-8e10-79af873ff15e",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 21, 13, 57, 49, 576, DateTimeKind.Local).AddTicks(340),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "37409311-463e-4dd3-b8d7-39ae0acc4d15",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 21, 13, 57, 49, 576, DateTimeKind.Local).AddTicks(390),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "90b34518-b311-4bec-824e-b608cb78f6d9",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 21, 13, 57, 49, 576, DateTimeKind.Local).AddTicks(396),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "7c098cb8-6e5e-40db-a1ea-51767f7e2272",
                            FullName = "baran gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "ad62ebf9-b863-4609-9e70-26dcc488b06e",
                            FullName = "viktoriya gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "a9286ae7-fb73-498f-8b76-f6ad2e0f7381",
                            FullName = "daniel gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37409311-463e-4dd3-b8d7-39ae0acc4d15"
                        },
                        new
                        {
                            Id = "4d43f4ed-b394-44f5-8078-e69284a517ff",
                            FullName = "dimana gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "e60b7b0c-9e1c-49cf-a03e-72db69bfca15",
                            FullName = "dimitar gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "52267193-578e-4b44-8bab-f66c098b7256"
                        },
                        new
                        {
                            Id = "d540e7da-f4f6-4edb-af3f-c3b94812db5f",
                            FullName = "emre gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "52267193-578e-4b44-8bab-f66c098b7256"
                        },
                        new
                        {
                            Id = "32ff3de2-8428-451d-830a-d057d8e11878",
                            FullName = "ivayla gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "447cda54-aac1-4567-85c2-f268383b9c5b",
                            FullName = "ivan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37409311-463e-4dd3-b8d7-39ae0acc4d15"
                        },
                        new
                        {
                            Id = "075f3f86-301e-4b9e-a46b-f1845e8a93c6",
                            FullName = "ivan_ivanov gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "37409311-463e-4dd3-b8d7-39ae0acc4d15"
                        },
                        new
                        {
                            Id = "0c653013-57db-4f80-8548-2c63815259ab",
                            FullName = "dimitar_barlev gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ae4f0260-b72b-46bd-8e10-79af873ff15e"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "eaa3d6af-d4ec-4f9e-95e7-c7a0de7f8d90",
                            FullName = "turhan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ae4f0260-b72b-46bd-8e10-79af873ff15e"
                        },
                        new
                        {
                            Id = "fbc04931-e7e1-411f-998e-a360dcf387c6",
                            FullName = "venci gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ae4f0260-b72b-46bd-8e10-79af873ff15e"
                        },
                        new
                        {
                            Id = "35b168aa-9832-4e17-bc09-ca27933af21e",
                            FullName = "ahmed gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "f1fe62e7-9ae0-40fe-84a6-2ed9345e7646",
                            FullName = "martin gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "90b34518-b311-4bec-824e-b608cb78f6d9"
                        },
                        new
                        {
                            Id = "7f00a59d-869b-44e9-bdfd-59d12cdeddd9",
                            FullName = "desi gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ae4f0260-b72b-46bd-8e10-79af873ff15e"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated by $.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b453213a-5066-46f4-b2de-be6ee9172488",
                            ConcurrencyStamp = "b453213a-5066-46f4-b2de-be6ee9172488",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "62614448-daea-4cdf-996f-73ed239709a6",
                            ConcurrencyStamp = "62614448-daea-4cdf-996f-73ed239709a6",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "9263964d-46c7-463f-b477-8b90705b1455",
                            ConcurrencyStamp = "9263964d-46c7-463f-b477-8b90705b1455",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c99d910e-7c95-4eb0-9a9b-bdbbb8a00591",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d8b1172-d8d3-46a1-9506-e9f1a5d3825e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBUf8Zb8GqIVn/jXJ74/21zqvQpvYxMrV9eJfhzbohs8BLNH5ad3/8DqsFPEKmL7uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46ad861e-97a4-459a-8c19-71162027b8fb",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "eaa3d6af-d4ec-4f9e-95e7-c7a0de7f8d90",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3734d01-d111-4357-8ab1-fc302c7f7b63",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFldPsupeav+BbW1L/nNygD92B5i2rp+O1tAh+9zMSQnaI37U90h/PbTaBEVWK7MYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "667e0a2d-1331-4421-a597-10c3a05e4195",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com"
                        },
                        new
                        {
                            Id = "fbc04931-e7e1-411f-998e-a360dcf387c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddb83a50-f675-4bf0-be1d-e27e8b6afda1",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9KYqyYHpDd2gf+oXE6+hvWiKBUKs/CuW4bgAuk0pGr0k5EtZrXK2GUlvv/SY0QSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "377263e9-f870-472e-ba14-3e0e4074acd7",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com"
                        },
                        new
                        {
                            Id = "35b168aa-9832-4e17-bc09-ca27933af21e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8868db76-2c82-42ed-a269-4b2966e42b15",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFgQVDrW3L+UykwcGm9EZu8NWpZSXzWSwSf70IdEMD9sl9IM2ZAZMcDKhc01+etDtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "599f0912-3434-4fe4-b3bc-6b476e1966db",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "f1fe62e7-9ae0-40fe-84a6-2ed9345e7646",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd997123-3292-413d-bbbe-91635c3cf59b",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMyLFvw/ktVQgflMoW1ZIMuV4MAkMdPmKVuWbBL8tqL4ogJ0N3Ho/cP5T55D8xp2/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c76b4cb7-8727-4b6c-b05c-56e879d23b04",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com"
                        },
                        new
                        {
                            Id = "7f00a59d-869b-44e9-bdfd-59d12cdeddd9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5245ea96-a68e-4c4f-81a7-63d519c77144",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnp64BUck9Ss9ASSvPGT78OV9HVVWRhdlNtcYaXpNisfrhRHOiI5XQC8y5LnAOWxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2c4afac-6783-4dbc-b8e4-66be69aacefa",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com"
                        },
                        new
                        {
                            Id = "7c098cb8-6e5e-40db-a1ea-51767f7e2272",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ea4bf7d-41b9-4264-81cf-8621ff642c16",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvZvG+AEXJGdLQJ+Cz9PX9KED0AG02zziXYFN1RFClKUwK2IsfO8tJLkJRXsTozGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3cb17d1-7a7a-4a0b-9724-375d3aece09e",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com"
                        },
                        new
                        {
                            Id = "ad62ebf9-b863-4609-9e70-26dcc488b06e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db71340b-9d81-4cd3-8747-3ddc9a4da3d6",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbt5mfB5cEDXd00n9m2Jq9NPHT9oa1r0ucHCpaoNKfAPBHfx0szCDIdPcvmlcJXwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef29dc18-9e04-4fcb-a607-b2209ecc8052",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com"
                        },
                        new
                        {
                            Id = "a9286ae7-fb73-498f-8b76-f6ad2e0f7381",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7233fc6-4dcf-4a6f-b779-2545e2a63668",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELZ/ZdjgIRVzCn3orWdqlaSWMHdN1R98r34jH7/Q/vu53Hn5d3NFI0nS6e6WBLWdzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5ddab2d-4e92-400c-86eb-8dff3bb064d2",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com"
                        },
                        new
                        {
                            Id = "4d43f4ed-b394-44f5-8078-e69284a517ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2358c1de-298c-4791-bf5e-70ca0aa4920b",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMcS4NVqNR3UGaSjdT39xEvjVvTEr+fdPRKXl+drGE+GEeVduMJIclAQ5PUAWJc5zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad7b6829-1e6c-4b7d-8ffa-d7eaae89bc6d",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com"
                        },
                        new
                        {
                            Id = "e60b7b0c-9e1c-49cf-a03e-72db69bfca15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad74bb0d-6455-4715-8aeb-0a0779e942e5",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJOe7wdvs7n/LWOuUiuVcyIjrfF8G18r5GFmUDDIoOkISnQehqYrJ5/n2J0NpRpMow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "761b42a5-bb3f-41a1-94cb-c053deea640a",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com"
                        },
                        new
                        {
                            Id = "d540e7da-f4f6-4edb-af3f-c3b94812db5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "befd30d7-9a0e-442d-bc81-44d9a8e19c5a",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC9MDuMhr0jqpPwWSDvOyt2r+NU0+fN2aGH5CsCKeN1Jip19Tdh39NELee6By2OzvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8648da64-677e-4902-9a20-18ad3286fcb7",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com"
                        },
                        new
                        {
                            Id = "32ff3de2-8428-451d-830a-d057d8e11878",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3ed5c1d-5be4-4f55-a0d4-a738f192b162",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE4vFmYUqWzaNdUzSAjoPVSSRkigOS/kkaJ9ZQKRh+VnQ6iwQ5+ABakTtLwoEBSkUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd778301-556b-490d-a2dd-973c043ff9d5",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com"
                        },
                        new
                        {
                            Id = "447cda54-aac1-4567-85c2-f268383b9c5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9055632d-bd76-4b02-95d6-8d9efc63e7b7",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECs8MdHS3z86QVBERPRSsHK6rno5w57HTFnVBDlWDUfwZ5Zzvz5EeFa1aNw+OyjoZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5b6addc-c544-4656-b285-ac0a93fa04f9",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com"
                        },
                        new
                        {
                            Id = "075f3f86-301e-4b9e-a46b-f1845e8a93c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d71e27e0-84f6-4c48-a8f1-e153718a18bd",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEASqBt66xCEvyCvhz4hoO6bllgw0BQ/XVpoSFHaNYpGOhijfKmZe+aR9uplq4CkEeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a6f4a5c-555c-4599-ada8-bf85feff43d3",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "0c653013-57db-4f80-8548-2c63815259ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2e20df8-341d-4fc0-979f-5667b6582e7c",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJozJu1U2LVRBjAmcAQeFUywwxvcImK56SG6Sf+vbv2mF+u8FQFbzsj4VFpn/xac6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60936f05-3f9d-4e8d-b6ed-d5492559f78d",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c99d910e-7c95-4eb0-9a9b-bdbbb8a00591",
                            RoleId = "b453213a-5066-46f4-b2de-be6ee9172488"
                        },
                        new
                        {
                            UserId = "eaa3d6af-d4ec-4f9e-95e7-c7a0de7f8d90",
                            RoleId = "9263964d-46c7-463f-b477-8b90705b1455"
                        },
                        new
                        {
                            UserId = "fbc04931-e7e1-411f-998e-a360dcf387c6",
                            RoleId = "9263964d-46c7-463f-b477-8b90705b1455"
                        },
                        new
                        {
                            UserId = "35b168aa-9832-4e17-bc09-ca27933af21e",
                            RoleId = "9263964d-46c7-463f-b477-8b90705b1455"
                        },
                        new
                        {
                            UserId = "f1fe62e7-9ae0-40fe-84a6-2ed9345e7646",
                            RoleId = "9263964d-46c7-463f-b477-8b90705b1455"
                        },
                        new
                        {
                            UserId = "7f00a59d-869b-44e9-bdfd-59d12cdeddd9",
                            RoleId = "9263964d-46c7-463f-b477-8b90705b1455"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithMany()
                        .HasForeignKey("SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

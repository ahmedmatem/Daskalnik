// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240401174748_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "2fe05866-30cd-4524-83f6-3f9fcbd5018a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 4, 1, 20, 47, 47, 728, DateTimeKind.Local).AddTicks(8316),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "0db86335-f04f-40a3-b6e5-3afec98d3fb8",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 4, 1, 20, 47, 47, 731, DateTimeKind.Local).AddTicks(5729),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "eef8430f-c731-49e4-8040-c7f37c8be5e0",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 4, 1, 20, 47, 47, 731, DateTimeKind.Local).AddTicks(5772),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "9d012bc0-35be-4f62-9d74-02d922b94952",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 4, 1, 20, 47, 47, 731, DateTimeKind.Local).AddTicks(5798),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "80b82eef-d8c9-420a-9ee2-1638210f1fc4",
                            FullName = "baran gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "0db86335-f04f-40a3-b6e5-3afec98d3fb8"
                        },
                        new
                        {
                            Id = "89861300-2c82-4969-b2dd-d3745aeabec4",
                            FullName = "viktoriya gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        },
                        new
                        {
                            Id = "db1170c8-69a0-45a4-9b6e-ad24086a57d4",
                            FullName = "daniel gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "eef8430f-c731-49e4-8040-c7f37c8be5e0"
                        },
                        new
                        {
                            Id = "064430b5-8ec5-44ed-b98e-dfd9c8839983",
                            FullName = "dimana gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9d012bc0-35be-4f62-9d74-02d922b94952"
                        },
                        new
                        {
                            Id = "0a85858f-f811-4321-90ce-a4978d9941b7",
                            FullName = "dimitar gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9d012bc0-35be-4f62-9d74-02d922b94952"
                        },
                        new
                        {
                            Id = "4a16f985-567e-43ce-b386-1f2f213b1f16",
                            FullName = "emre gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        },
                        new
                        {
                            Id = "e6f07541-941f-4fd8-936a-cf412bc41d07",
                            FullName = "ivayla gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "eef8430f-c731-49e4-8040-c7f37c8be5e0"
                        },
                        new
                        {
                            Id = "c10f3c92-ec3a-4f43-8c79-b0882cb66f89",
                            FullName = "ivan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        },
                        new
                        {
                            Id = "711f2519-e2d8-4de3-989d-13e8bd8f1406",
                            FullName = "ivan_ivanov gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        },
                        new
                        {
                            Id = "8909e1f1-e65d-4a75-bf0b-7547b33eff8e",
                            FullName = "dimitar_barlev gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "0cb3a82b-b5ab-48de-a67a-3717b79c9b51",
                            FullName = "turhan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "eef8430f-c731-49e4-8040-c7f37c8be5e0"
                        },
                        new
                        {
                            Id = "190b0158-ae78-4049-80ae-e80aa1b325c2",
                            FullName = "venci gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2fe05866-30cd-4524-83f6-3f9fcbd5018a"
                        },
                        new
                        {
                            Id = "3bd2f413-eb1e-4117-a66f-eb64f2e0d039",
                            FullName = "ahmed gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "0db86335-f04f-40a3-b6e5-3afec98d3fb8"
                        },
                        new
                        {
                            Id = "81c7b8bb-3675-433d-9fee-be423f0dffa8",
                            FullName = "martin gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "0db86335-f04f-40a3-b6e5-3afec98d3fb8"
                        },
                        new
                        {
                            Id = "9366f7d0-0aae-4a81-9a27-7bad8f84f71e",
                            FullName = "desi gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9d012bc0-35be-4f62-9d74-02d922b94952"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "26c1ab57-f829-4cce-b48b-300fa1cdd485",
                            ConcurrencyStamp = "26c1ab57-f829-4cce-b48b-300fa1cdd485",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9f8c2e76-1be5-45a1-886d-b7b18bb11a93",
                            ConcurrencyStamp = "9f8c2e76-1be5-45a1-886d-b7b18bb11a93",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "aae0420a-7494-46fd-a1b9-5f127805e272",
                            ConcurrencyStamp = "aae0420a-7494-46fd-a1b9-5f127805e272",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f24c990d-7aa9-469b-83a0-31126e1174c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7852eeb-0443-4ab7-80ea-51ef961a6b47",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhFvavFNY+8lrE1+Pdkm0wH3F0czc+zv8bN0KDIkwgebjZJVtox9blTM08OTaWaCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce3d4393-a342-46c3-86a0-f4d1359a2bcb",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "0cb3a82b-b5ab-48de-a67a-3717b79c9b51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bda2c87-5d22-4882-8866-5d98bdb8c909",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELM5EiIPnxDNAmv61/+B5rkSrLqCUrhqdN433wHRwo9sgCkkFQSzDtReuePJjBWOIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92e142c5-8430-4f5d-ab8c-93cf2fa3c769",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com"
                        },
                        new
                        {
                            Id = "190b0158-ae78-4049-80ae-e80aa1b325c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17e7f99a-0a9b-42c5-af26-90568b9613ed",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBTSK2/vQOeII1uh+1EltRvINgeklH40Y9Ldi4WzThpVtg5dzFdL/Rz0CO5W0u2R8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e85769e5-e066-4fdf-abb0-16c5175c492b",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com"
                        },
                        new
                        {
                            Id = "3bd2f413-eb1e-4117-a66f-eb64f2e0d039",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8525c5be-91ba-4a3f-a652-735ad388bd80",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECeLTLh5K5eWRgztAX9CPWk/kHspXnAYEKTz8Hqlrru/NlFVdpdQmmQ2U2MGh0ruqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ebbe0ba-e649-4f82-b0ec-ea1b603911c1",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "81c7b8bb-3675-433d-9fee-be423f0dffa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "732258d3-aca8-4238-a086-2f23e405d396",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDu1bGDJ5JC9UzWmEyoeveYYPBrVTvZd1Jil5NEtCuhrAGu+7kP/yIEK/7K5BOvmkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35d2c086-a2bc-4c6c-8856-f4325cb67b07",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com"
                        },
                        new
                        {
                            Id = "9366f7d0-0aae-4a81-9a27-7bad8f84f71e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "076a6bee-c396-4660-b43d-b7cde273caf1",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEILNHyBPL2TzeHuZP6ERCcZn4gL7tA8FRdqq3yDY96HGccqSzM3urePA880KJOYD6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a8464b6-eebd-453a-8035-4de43bcc6b30",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com"
                        },
                        new
                        {
                            Id = "80b82eef-d8c9-420a-9ee2-1638210f1fc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "515a4989-7b6b-4545-9361-c5ccbe71f959",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHMkuS4ak3POPr1JsWXlwmb5ZO4/hVHf3icGAPtgPRB2+zHcNRUQ9CrKNXzGEIEAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "522f23b2-c160-42c1-b4ba-28369d48cfc7",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com"
                        },
                        new
                        {
                            Id = "89861300-2c82-4969-b2dd-d3745aeabec4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bbf8cd4-2f4e-4899-be48-4f81f01b02a1",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKUCKQIfLENBd2M8X0ns45VTeqLrUakZnGcwjqRiue+kbdB67utW/tNIr2fKt8wm3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f202710-2d5a-46e0-9b84-e8720b2df4ff",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com"
                        },
                        new
                        {
                            Id = "db1170c8-69a0-45a4-9b6e-ad24086a57d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "564c7fa1-5ddd-4034-a634-4e3abef571c6",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvKGRm7b2PZcgP5/2pGEjkgc4lruavGm2E43Q6awaofYoR824+zNCC1c6pTgU4reA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1120dedf-553a-4af0-9d30-37e4bfa183ed",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com"
                        },
                        new
                        {
                            Id = "064430b5-8ec5-44ed-b98e-dfd9c8839983",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81642a6b-ede2-4f45-b0c7-b655ad4d18e3",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI4812IHW/IJcvtl/gYyAAp3A1pcaf8RsjOtNIWhWKUslyg3cqONO9BkoPQhOgWXyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41c620c1-44cf-40ba-89c3-66dd15a20806",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com"
                        },
                        new
                        {
                            Id = "0a85858f-f811-4321-90ce-a4978d9941b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60a687f2-c1e4-4805-b9dc-17bb5b4b1d3c",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDlWvnXXa055BJlvoxRHo7AEBaZtKHaGy0IU/a2InJH/3uudsr4Y2Y7uhB2Ke8Atjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cb4aae2-af33-4473-986c-ed83aa368f6a",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com"
                        },
                        new
                        {
                            Id = "4a16f985-567e-43ce-b386-1f2f213b1f16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f93123ff-4e31-472f-b715-f866e850c180",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENz6AUP8QeCuKlcYwwFZa4hBULCQxZLeepmUhpxesJkjlswiytFe9LebJ293gjMXTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f767d34-475d-4f6e-93a4-5dbe2db022ce",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com"
                        },
                        new
                        {
                            Id = "e6f07541-941f-4fd8-936a-cf412bc41d07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d0a08b2-54d9-44b5-9131-bcfe909d3a98",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZ7kMJudquVdJTD+H08XITr0WRf93vtAbNB8rjlK2ChrXlYCgryuORYR1ivOuynnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74ccf183-f502-42d6-98a4-20257e11c542",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com"
                        },
                        new
                        {
                            Id = "c10f3c92-ec3a-4f43-8c79-b0882cb66f89",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "525baa2f-6121-477a-9f65-181bccb482db",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtgMwW8uSDWY2N6pE+z1hcN67F/ajODMj5TCkG33vyiOxXmYxSXxgMsyJr01jDhTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc8c759d-e7ef-4419-88e0-7018e56763e5",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com"
                        },
                        new
                        {
                            Id = "711f2519-e2d8-4de3-989d-13e8bd8f1406",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65ba76a3-291e-4aec-8b68-4d94adc28ddb",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPJXpVMoWweTU3SLCjTzqUDTGMhkkWMk/pFW6fmZyuom5MSUEZ+A6cpVxkMVDHhWBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e975c1a-8423-45ed-bf74-2d7d5fd9311f",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "8909e1f1-e65d-4a75-bf0b-7547b33eff8e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15442a30-e889-4b56-9d10-71aca6988bf5",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFX7WVSCCfJShYQjNFAlplLudwXlBz7cealsF1nXrfP1q5EAeCrh0D53A6zXi9hbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c5df29a-6d78-4452-83ed-f96b14624b9d",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f24c990d-7aa9-469b-83a0-31126e1174c7",
                            RoleId = "26c1ab57-f829-4cce-b48b-300fa1cdd485"
                        },
                        new
                        {
                            UserId = "0cb3a82b-b5ab-48de-a67a-3717b79c9b51",
                            RoleId = "aae0420a-7494-46fd-a1b9-5f127805e272"
                        },
                        new
                        {
                            UserId = "190b0158-ae78-4049-80ae-e80aa1b325c2",
                            RoleId = "aae0420a-7494-46fd-a1b9-5f127805e272"
                        },
                        new
                        {
                            UserId = "3bd2f413-eb1e-4117-a66f-eb64f2e0d039",
                            RoleId = "aae0420a-7494-46fd-a1b9-5f127805e272"
                        },
                        new
                        {
                            UserId = "81c7b8bb-3675-433d-9fee-be423f0dffa8",
                            RoleId = "aae0420a-7494-46fd-a1b9-5f127805e272"
                        },
                        new
                        {
                            UserId = "9366f7d0-0aae-4a81-9a27-7bad8f84f71e",
                            RoleId = "aae0420a-7494-46fd-a1b9-5f127805e272"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

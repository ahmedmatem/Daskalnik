// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929194133_ExamModels")]
    partial class ExamModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ExamGroup");
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the exam.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Exam description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exam name");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.HasKey("ExamId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ExamsAndResources");

                    b.HasComment("Many-to-many mapping table for Exam and Resource.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "692235a1-02b1-483d-932a-63572a57c607",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 41, 32, 317, DateTimeKind.Local).AddTicks(9278),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 41, 32, 319, DateTimeKind.Local).AddTicks(4152),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "59733d7e-c309-4365-b2d9-784fc0efa8c9",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 41, 32, 319, DateTimeKind.Local).AddTicks(4170),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "426a3589-a5fd-4487-864a-712c07c0eba0",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 41, 32, 319, DateTimeKind.Local).AddTicks(4174),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "ce76ae14-44d1-4ad9-8d9d-2085c6d7cbb7",
                            FullName = "Баран Ахмедов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "426a3589-a5fd-4487-864a-712c07c0eba0"
                        },
                        new
                        {
                            Id = "a3c86be4-d9e7-4526-b696-bd301d04860c",
                            FullName = "Виктория Петрова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "692235a1-02b1-483d-932a-63572a57c607"
                        },
                        new
                        {
                            Id = "f4c9edb2-fa96-437f-9778-8335045f52eb",
                            FullName = "Даниел Петорв",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "b408525d-3ce9-4cea-8350-2ec29dcca11f",
                            FullName = "Димана Иванова Колева",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "eb2010a9-6531-461a-be00-98c4dc7d821f",
                            FullName = "Димитар Димитров",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "426a3589-a5fd-4487-864a-712c07c0eba0"
                        },
                        new
                        {
                            Id = "dc087412-08c6-4562-a711-03c790c729a9",
                            FullName = "Емре Алиев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "3f8a3b61-6dd9-4684-af45-467a60c67c0a",
                            FullName = "Ивайла Иванова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "692235a1-02b1-483d-932a-63572a57c607"
                        },
                        new
                        {
                            Id = "6dc686ba-0415-4e37-b119-9bc3bad06dc2",
                            FullName = "Иван Манолов Кишанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "59733d7e-c309-4365-b2d9-784fc0efa8c9"
                        },
                        new
                        {
                            Id = "041c3902-ae7d-4792-937f-663e365d675b",
                            FullName = "Иван Петров Иванов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "0f7aeb93-4a8a-478b-bb5b-a8985c2a5ce2",
                            FullName = "Димитър Димов Барлев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "6f329570-ea27-4d3b-b776-90f40866a8ad",
                            FullName = "Турхан Мюмюн Сюлейман",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "03c8c70f-f19c-403a-aa4b-38a6cf315fa0",
                            FullName = "Венцислав Кочанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "426a3589-a5fd-4487-864a-712c07c0eba0"
                        },
                        new
                        {
                            Id = "f5f5f4db-bff8-45af-9639-03bba0e62574",
                            FullName = "Ахмед Матем Ахмед",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "c38652b0-2c41-4ca6-9e03-51c84ecbd16a"
                        },
                        new
                        {
                            Id = "9d44bc39-82fa-4bc6-b5da-5e1ccd39942c",
                            FullName = "Мартин Катев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "692235a1-02b1-483d-932a-63572a57c607"
                        },
                        new
                        {
                            Id = "9e231eda-6809-47c1-9bd9-8a14826f1ee7",
                            FullName = "Десислава Петкова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "59733d7e-c309-4365-b2d9-784fc0efa8c9"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9232bdab-cc7c-499a-89a4-651c61d88814",
                            ConcurrencyStamp = "9232bdab-cc7c-499a-89a4-651c61d88814",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "15c67a79-9cf5-42af-9eee-25684460606a",
                            ConcurrencyStamp = "15c67a79-9cf5-42af-9eee-25684460606a",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e",
                            ConcurrencyStamp = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3077d8a2-f403-424f-ba6e-370d476cb9fe",
                            RoleId = "9232bdab-cc7c-499a-89a4-651c61d88814"
                        },
                        new
                        {
                            UserId = "6f329570-ea27-4d3b-b776-90f40866a8ad",
                            RoleId = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e"
                        },
                        new
                        {
                            UserId = "03c8c70f-f19c-403a-aa4b-38a6cf315fa0",
                            RoleId = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e"
                        },
                        new
                        {
                            UserId = "f5f5f4db-bff8-45af-9639-03bba0e62574",
                            RoleId = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e"
                        },
                        new
                        {
                            UserId = "9d44bc39-82fa-4bc6-b5da-5e1ccd39942c",
                            RoleId = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e"
                        },
                        new
                        {
                            UserId = "9e231eda-6809-47c1-9bd9-8a14826f1ee7",
                            RoleId = "b12dfc0b-c8f7-4ef6-be83-9c1623f8475e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "3077d8a2-f403-424f-ba6e-370d476cb9fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31189632-386a-4963-8a9f-47669fd41fd9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKea1elY+ZyOcun5bkVITKYMQzaxT5rAdhNglyWe/ktrQnrguIwPgQxFC/dnz7xiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8c10e8f-041a-4ba6-ab8e-371ec072572a",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "6f329570-ea27-4d3b-b776-90f40866a8ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb18f476-a7e6-4ae9-8448-0e3c9cbe522e",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG00G/k7E5sdvcPZpBAvStGxg05mANUiHErMpxfU0uCd5c9U+cGp2Iv3LKl0YyWXAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91f8a224-f889-4f29-8453-4fd3b24b4b1f",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюн Сюлейман",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "03c8c70f-f19c-403a-aa4b-38a6cf315fa0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deac88a4-2919-43fc-aa5d-f6d4d1445ce8",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF8sEYmF5eQG+9n0ERIrYTrAZjuEVUqRwLAsAq3Kn9T3Yoay0Rwt+sO+uQHQSCtw1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a24c0155-2a36-49f4-9e87-842cdba43286",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Венцислав Кочанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "f5f5f4db-bff8-45af-9639-03bba0e62574",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "136bce84-18a0-483e-82bd-8db3cb89519b",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMs+ZC22VhaN+q72D61FDnPgoz67tSNc553mV0B27EBOGSCHBYO9EcdPNxNRtLZvWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9085d345-00a2-463a-a9a9-0350d1fd2280",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "9d44bc39-82fa-4bc6-b5da-5e1ccd39942c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea33fd2b-6106-42ab-8922-0d86f9d94e91",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRd7kq7Y5frnZ/jgkJux/aGc+Aqm6SzW9ZARYThstplTMGSxED2EohmdgY+Ttb2lQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbac7060-f8aa-4cbe-80b6-58a15fe1fedf",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Катев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "9e231eda-6809-47c1-9bd9-8a14826f1ee7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3295dc7d-c898-4e53-98df-dc71afe6b29f",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFE9jjjSarLND/Tyf4jHDqD62X/4AuLIABz6DATr96KAilIAn9hE2M3GN/RKtKyRzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a520d4d-8bc5-489f-962a-a875d68eb9a4",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Петкова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "ce76ae14-44d1-4ad9-8d9d-2085c6d7cbb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8990325-7b5d-473e-8ec6-2b9d8ec171e9",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQFeLGlF8x50Y7Zq6inpfwxjL+I49HvpL5xn0r+hUuVnWVSAUjc9Htxkbny+Zkp5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3025868-ae46-46f6-a03f-1d10aa4d128a",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Ахмедов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "a3c86be4-d9e7-4526-b696-bd301d04860c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67f31a93-63fc-4208-b2e7-de6161e2232c",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOoCEMRF9+rSbL+CnQ/tuqEN8WZvWuoGa4e/auTFEm+QbW2ffLFtsPYsMFere3hwQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b638509-355b-4e4b-99ab-2012ae478b99",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория Петрова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "f4c9edb2-fa96-437f-9778-8335045f52eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31fd7f28-e827-4fd1-b1ed-16bb1d6bd909",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFp3XGKIbuSHcX3qqota2o4Qw5N+Etsr4pCohx269naiLLFGyEAyHq9uuC/xE5kJjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0f9f2ca-8d67-4afa-a131-48215aacc89b",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Петорв",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "b408525d-3ce9-4cea-8350-2ec29dcca11f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6453d9b9-040c-400b-9f02-4b2e225c7ee9",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTdi1//uJjjd2HVBOSzTXpMPli+vSHc/rqYYlrmOoqieDDFElqbXZl/niBTku8e4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f401957-fc4c-4e00-94b4-3c231f6b52e4",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана Иванова Колева",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "eb2010a9-6531-461a-be00-98c4dc7d821f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db8df76a-e99f-4f0b-ac7e-abfbaf96d757",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECwGU9FXUQDFPkiG98j7HTCH0NXOyk4403a/cBYnuNiYLvwPYn/oED7p7LaRKGI3nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28170d33-7f04-4e9c-a41c-bfbe858e4d05",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитар Димитров",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "dc087412-08c6-4562-a711-03c790c729a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "992dc89a-ecef-4dc4-91be-ab93f9688266",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHOic8Wdzo5I/Y4J6ohX5cs7gedilpF9Mur0q42Kwb7ndJVPgOJegKo4AJoeWvDnuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad42a2b3-f860-4a82-a5b4-30fe922801ff",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Алиев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "3f8a3b61-6dd9-4684-af45-467a60c67c0a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f8d9309-adeb-4950-ae1d-ce2f1a02b525",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGPCA9XL8W+aMT/JfXClxGwfRN3YFGzaxZZ8ZGhB513K/iJVa8HiK4Vvr3rdO5WXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "553476b8-bebc-4d06-a566-cf8ffba60520",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Иванова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "6dc686ba-0415-4e37-b119-9bc3bad06dc2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2221b44d-2e44-4f7d-abaf-98dd89f7cfe5",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBNwtY8AOcb1+8i2OeTfenbQ/aNyMH3Vk2FMT8tmb2pOJgbEg7yB3JRwqQpPvpjhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95260c8c-6216-48e3-bb4f-8c7ca973d505",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Манолов Кишанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "041c3902-ae7d-4792-937f-663e365d675b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed1be1e5-0b2a-41fb-898c-f36d9bdd7cbe",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI9r2nrDyUdjLQ4FZudb+XgKeL/4lPIyKWO4nxDnZgAFHMzt8a2eZcVdWq+uFojTMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2bc7b98-6d55-4741-80df-29aa81e3863c",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com",
                            FullName = "Иван Петров Иванов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "0f7aeb93-4a8a-478b-bb5b-a8985c2a5ce2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abdf49ba-a6cb-465d-b995-46dd7333ce31",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECauPPY1MTsqxWJXn/Xpr6gUNNfTeaxAfdGJ+ikazd6A4/ChQKEPyAo/JZCfttSiNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db50cd0b-59ac-4b14-b686-ec9ed99cd15f",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com",
                            FullName = "Димитър Димов Барлев",
                            SchoolId = ""
                        });
                });

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241002165919_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ExamGroup");
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the exam.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Exam description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exam name");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.HasKey("ExamId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ExamsAndResources");

                    b.HasComment("Many-to-many mapping table for Exam and Resource.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "157bd06b-d45a-4194-8d7d-73fcf1221af1",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 19, 59, 18, 748, DateTimeKind.Local).AddTicks(5799),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "73371fab-4565-432d-9359-371663a2a4b0",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 19, 59, 18, 750, DateTimeKind.Local).AddTicks(239),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "ff4a9f87-e56e-4033-b792-ace4e3a51706",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 19, 59, 18, 750, DateTimeKind.Local).AddTicks(256),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "57d1dec1-091a-4caa-8010-fcb238ccb467",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 19, 59, 18, 750, DateTimeKind.Local).AddTicks(261),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "607dd8b5-f679-4ff9-917f-3be340983aee",
                            FullName = "Баран Ахмедов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "157bd06b-d45a-4194-8d7d-73fcf1221af1"
                        },
                        new
                        {
                            Id = "d2b3519a-bcb4-4380-a36d-7993cf1e931e",
                            FullName = "Виктория Петрова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ff4a9f87-e56e-4033-b792-ace4e3a51706"
                        },
                        new
                        {
                            Id = "e62ac2be-ce10-48c4-9264-75eb2c00b6f4",
                            FullName = "Даниел Петорв",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "57d1dec1-091a-4caa-8010-fcb238ccb467"
                        },
                        new
                        {
                            Id = "177fe736-22e9-4232-ae3e-c7a69f5fc7ba",
                            FullName = "Димана Иванова Колева",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "157bd06b-d45a-4194-8d7d-73fcf1221af1"
                        },
                        new
                        {
                            Id = "5b8455b1-910f-4cb8-9737-537181ce3317",
                            FullName = "Димитар Димитров",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "73371fab-4565-432d-9359-371663a2a4b0"
                        },
                        new
                        {
                            Id = "e88f76e9-a7d5-443f-8c3a-3982f2b3d105",
                            FullName = "Емре Алиев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "57d1dec1-091a-4caa-8010-fcb238ccb467"
                        },
                        new
                        {
                            Id = "056b7499-358b-4903-b4d0-e24e93bd4843",
                            FullName = "Ивайла Иванова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "73371fab-4565-432d-9359-371663a2a4b0"
                        },
                        new
                        {
                            Id = "58fe24f0-5e8c-4043-984c-09832497fe5e",
                            FullName = "Иван Манолов Кишанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ff4a9f87-e56e-4033-b792-ace4e3a51706"
                        },
                        new
                        {
                            Id = "f6d5ee23-d325-4fad-98f6-589364b3670d",
                            FullName = "Иван Петров Иванов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "57d1dec1-091a-4caa-8010-fcb238ccb467"
                        },
                        new
                        {
                            Id = "1ca06ca1-a438-496b-b55d-94e4de5e4394",
                            FullName = "Димитър Димов Барлев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ff4a9f87-e56e-4033-b792-ace4e3a51706"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "39a3f3db-5b25-4166-b023-ba9701397e12",
                            FullName = "Турхан Мюмюн Сюлейман",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "ff4a9f87-e56e-4033-b792-ace4e3a51706"
                        },
                        new
                        {
                            Id = "39087eba-d2d9-4395-aa54-f329c76702e8",
                            FullName = "Венцислав Кочанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "57d1dec1-091a-4caa-8010-fcb238ccb467"
                        },
                        new
                        {
                            Id = "7bfdb7ca-4c64-449f-a931-05f77ceb39a8",
                            FullName = "Ахмед Матем Ахмед",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "57d1dec1-091a-4caa-8010-fcb238ccb467"
                        },
                        new
                        {
                            Id = "7579392b-ab48-412c-b25a-8fce42001d49",
                            FullName = "Мартин Катев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "157bd06b-d45a-4194-8d7d-73fcf1221af1"
                        },
                        new
                        {
                            Id = "459fe7e3-70e2-4d07-a76e-8d7e7434cfcf",
                            FullName = "Десислава Петкова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "73371fab-4565-432d-9359-371663a2a4b0"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e054d5b-b318-458c-9d15-e8a3a4c4ef9e",
                            ConcurrencyStamp = "8e054d5b-b318-458c-9d15-e8a3a4c4ef9e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "35bff768-ba42-41e5-a30a-493f11d5cdb8",
                            ConcurrencyStamp = "35bff768-ba42-41e5-a30a-493f11d5cdb8",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "c56f1ce0-4376-42b3-8e61-8dd00b985f42",
                            ConcurrencyStamp = "c56f1ce0-4376-42b3-8e61-8dd00b985f42",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "18d87ae0-73b1-4ec2-a962-e9c71ab49be9",
                            RoleId = "8e054d5b-b318-458c-9d15-e8a3a4c4ef9e"
                        },
                        new
                        {
                            UserId = "39a3f3db-5b25-4166-b023-ba9701397e12",
                            RoleId = "c56f1ce0-4376-42b3-8e61-8dd00b985f42"
                        },
                        new
                        {
                            UserId = "39087eba-d2d9-4395-aa54-f329c76702e8",
                            RoleId = "c56f1ce0-4376-42b3-8e61-8dd00b985f42"
                        },
                        new
                        {
                            UserId = "7bfdb7ca-4c64-449f-a931-05f77ceb39a8",
                            RoleId = "c56f1ce0-4376-42b3-8e61-8dd00b985f42"
                        },
                        new
                        {
                            UserId = "7579392b-ab48-412c-b25a-8fce42001d49",
                            RoleId = "c56f1ce0-4376-42b3-8e61-8dd00b985f42"
                        },
                        new
                        {
                            UserId = "459fe7e3-70e2-4d07-a76e-8d7e7434cfcf",
                            RoleId = "c56f1ce0-4376-42b3-8e61-8dd00b985f42"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "18d87ae0-73b1-4ec2-a962-e9c71ab49be9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23d214bc-25d4-46f6-9096-10c61e18cadf",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECd41x47pu9Es6B7G8mPSUeks/p0PX/TKOxVciDZj5Z0p7X2PRwoubXpoQhH0Mcl7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8607cafd-3c6a-441a-8ff9-eb80fcf66ab5",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "39a3f3db-5b25-4166-b023-ba9701397e12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9128ca12-a3dc-446e-ad65-1eac69836d41",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP2gjcWiKb9t27mUhXRXsaixZUVddMaK0CZNEiZDhPpTkY2jdOAM738ncC29xvvwKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c233730d-8774-4385-a3ba-d49fc096013d",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюн Сюлейман",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "39087eba-d2d9-4395-aa54-f329c76702e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb7a6912-0b7a-42a1-bd93-7c2e43a29d05",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC48nVJ09Bmi3OEj3yH6pctIPGnqkbPt2TdqFuhsG+V/ijPmTp8bp1Ykx3jCPZKJeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71b35a47-b603-46db-99bb-b5b39a873d70",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Венцислав Кочанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "7bfdb7ca-4c64-449f-a931-05f77ceb39a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a28b7ea7-48ee-4bb2-9f64-6c1285ff57a6",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFsvmwxF/ce0SaLErVHC+14PBD+8HKBohCNY8m7GfZTNd6zxFJKhn3rYgAHUqfjtgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63ba5930-3cc5-4cce-8ef0-a1e7eb734fa9",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "7579392b-ab48-412c-b25a-8fce42001d49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3165146-a614-45f8-b46a-592b7e677f55",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHjyn5wHl75r0ODYsWZ+o+t7POHdcrzB27oDvvuD3e0+0Dpw+vrvAx+lK8JokQzQoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a22a5393-040a-47e3-810e-a2d085fa0020",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Катев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "459fe7e3-70e2-4d07-a76e-8d7e7434cfcf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50841959-37d4-4dbc-a962-c013ebe9310d",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCHXkm6d4LNBci0moGT0VJs/4YALIBoxNYEoSrZfuJzDikSaFJ9IzGFiWK5C9wo0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1c1cbbe-2a75-47c5-a3a0-44d4d1229770",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Петкова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "607dd8b5-f679-4ff9-917f-3be340983aee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e303814b-8ea7-4db3-a50b-4002d247e010",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFIvlihye+x/Ei5CDhpFOxZWyQg9jvH4FrGm/2G+5b8p6gtktrgNbVw8v3TWV/9i6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64d4fe9-c91c-4678-859d-dd66af81d8bb",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Ахмедов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "d2b3519a-bcb4-4380-a36d-7993cf1e931e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de84fbef-e376-4e78-af49-f58486de05fb",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJPnJEQhsOnASXNfP311biLrP9x2/6YGwHIZLn+u6jDTQASIqHnRXIrW1Hur0HfCLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f00a952-f772-43ad-a6d3-0a59e48035b1",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория Петрова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e62ac2be-ce10-48c4-9264-75eb2c00b6f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e8951eb-91d3-4371-8572-0a94b5c860b7",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPrYeGFAbrRrJBPfCIE0dIsV6NHmCp6M8sbh+dmZwgDiZDoLpZG+XLtJw21hj7xztQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86fd995e-e1cb-41c6-a8a4-50bbb560cf90",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Петорв",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "177fe736-22e9-4232-ae3e-c7a69f5fc7ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18b4ce35-3cf3-45e2-8d5d-f486531dc154",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMS6RueXNytNH4+cLV6WGCy2u2zy7ldk0ol8wlC2PDzNcyO587e4VEBem5C9hJgosw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7ca9cfa-6aca-4a12-939b-720a7bae355a",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана Иванова Колева",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "5b8455b1-910f-4cb8-9737-537181ce3317",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc11a229-9eec-41c5-8121-3f7df9caab96",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwWpJK2cNPWe5KuPDtPcOi/7DE/3F1VixQPPCXlzADFn615ppYK9SozL6XNmhA92g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a73948b-f1a4-4a70-b0f3-8f0fff5aa5b4",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитар Димитров",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e88f76e9-a7d5-443f-8c3a-3982f2b3d105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a14e90c8-98b2-4b02-aff1-4187538a80eb",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPI3qLJVWhH9Z+E911JW2vfN2kEzZUjjXPgY4Qj69Zi2DnOGLPdnKDW3X6X/70gtwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b92232fe-570b-4aba-96df-f5951d029d84",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Алиев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "056b7499-358b-4903-b4d0-e24e93bd4843",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cb4c5c8-f532-4044-8e72-464e33dc2f0a",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKStToA6Cfz/GJgX8kvuXeEWbi61TeJt61X55rGecx1vMc+Nz3YjV5+X6SBFz6WlAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "034b0196-806f-4410-83ce-4ca04f8d5c1f",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Иванова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "58fe24f0-5e8c-4043-984c-09832497fe5e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f214b82-cd30-4537-82d5-b36e3f8fa71d",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA00OlhHge1Ozc5bbwioVuitcKZdDRTMr0I1OaNgHvlHlNAFUnwsSHZvfSrwSWzuvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "812dbf48-c9fb-475d-b5df-233f3a59056e",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Манолов Кишанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "f6d5ee23-d325-4fad-98f6-589364b3670d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b57cf34-cbe0-4be0-874b-e925de16343c",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFfrRwx1Rxcx8Rp7s1exX6BVfdxckDDQWmN0SqbKz2spvla646u3Eub1Og9m9NnBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac3dd8e3-add8-4aea-87d4-39d0b85893d3",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com",
                            FullName = "Иван Петров Иванов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "1ca06ca1-a438-496b-b55d-94e4de5e4394",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00a1a292-6fca-4b68-b5ac-37646bf4573b",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQViXqm6F9wCQzc/evJhJIuIHEMhncqYparR6NpmLnXf3kPL3MNv2qUCk6LbIuRqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "762fc0be-3303-43b9-af58-12ebc3fa7745",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com",
                            FullName = "Димитър Димов Барлев",
                            SchoolId = ""
                        });
                });

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

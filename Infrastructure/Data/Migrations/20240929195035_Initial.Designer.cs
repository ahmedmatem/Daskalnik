// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240929195035_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ExamGroup");
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the exam.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Exam description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exam name");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.HasKey("ExamId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ExamsAndResources");

                    b.HasComment("Many-to-many mapping table for Exam and Resource.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "308d65a6-1179-4961-80be-d558ebe10428",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 50, 34, 472, DateTimeKind.Local).AddTicks(4116),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "c05305c4-caa8-4db6-83d7-c39edcaca968",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 50, 34, 473, DateTimeKind.Local).AddTicks(9293),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "9db51b36-9493-4833-9c48-6e16b820009f",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 50, 34, 473, DateTimeKind.Local).AddTicks(9316),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 29, 22, 50, 34, 473, DateTimeKind.Local).AddTicks(9321),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "fad9d140-1f06-4b3a-a7e4-82d7cf6f99de",
                            FullName = "Баран Ахмедов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9db51b36-9493-4833-9c48-6e16b820009f"
                        },
                        new
                        {
                            Id = "f7236521-3161-4174-85dc-475719291f80",
                            FullName = "Виктория Петрова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "ca023b61-a4e1-407e-830c-ded191275872",
                            FullName = "Даниел Петорв",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "750cb8a2-75ab-4a45-8c0b-4c7e33b3ccfa",
                            FullName = "Димана Иванова Колева",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "a05462ee-8ca1-4242-abb2-97d1bb10c715",
                            FullName = "Димитар Димитров",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "308d65a6-1179-4961-80be-d558ebe10428"
                        },
                        new
                        {
                            Id = "8a1cbdac-c4c2-457b-8fde-88916cafb62f",
                            FullName = "Емре Алиев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9db51b36-9493-4833-9c48-6e16b820009f"
                        },
                        new
                        {
                            Id = "e171d05e-da91-4e2e-bbd5-f149d4ee1d15",
                            FullName = "Ивайла Иванова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "308d65a6-1179-4961-80be-d558ebe10428"
                        },
                        new
                        {
                            Id = "484509aa-0d30-4406-b58b-b6a0678cf7d3",
                            FullName = "Иван Манолов Кишанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "51a6291d-4cbb-4eeb-8fed-3b1daea4d18d",
                            FullName = "Иван Петров Иванов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "1b074c6b-7468-4327-9759-7b3525212c79",
                            FullName = "Димитър Димов Барлев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "308d65a6-1179-4961-80be-d558ebe10428"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "c6050397-b9b2-49ea-b1da-614c40bb7dd2",
                            FullName = "Турхан Мюмюн Сюлейман",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9db51b36-9493-4833-9c48-6e16b820009f"
                        },
                        new
                        {
                            Id = "5a85bdc7-f350-4d0f-ae1d-7dc77f0f8cf4",
                            FullName = "Венцислав Кочанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "9db51b36-9493-4833-9c48-6e16b820009f"
                        },
                        new
                        {
                            Id = "e5586bfd-2c1a-407d-bb25-32cc95f44f6d",
                            FullName = "Ахмед Матем Ахмед",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "d08f570e-9c68-4d48-954b-b500d4a8db5d",
                            FullName = "Мартин Катев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "45ffe1cd-14ef-444a-a30f-a892ec3ef6e1"
                        },
                        new
                        {
                            Id = "3a988763-fbce-4d00-adb0-e9932ea86cea",
                            FullName = "Десислава Петкова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "308d65a6-1179-4961-80be-d558ebe10428"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "58a72da0-9e2d-420c-8dbc-ebd28bcaa3e2",
                            ConcurrencyStamp = "58a72da0-9e2d-420c-8dbc-ebd28bcaa3e2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4855dd7d-0a23-41b4-b7ea-282eeb3c9798",
                            ConcurrencyStamp = "4855dd7d-0a23-41b4-b7ea-282eeb3c9798",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "4482f408-1d74-4dba-9db3-9db676baefc1",
                            ConcurrencyStamp = "4482f408-1d74-4dba-9db3-9db676baefc1",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "700910c3-f628-4991-8b73-886465feda8a",
                            RoleId = "58a72da0-9e2d-420c-8dbc-ebd28bcaa3e2"
                        },
                        new
                        {
                            UserId = "c6050397-b9b2-49ea-b1da-614c40bb7dd2",
                            RoleId = "4482f408-1d74-4dba-9db3-9db676baefc1"
                        },
                        new
                        {
                            UserId = "5a85bdc7-f350-4d0f-ae1d-7dc77f0f8cf4",
                            RoleId = "4482f408-1d74-4dba-9db3-9db676baefc1"
                        },
                        new
                        {
                            UserId = "e5586bfd-2c1a-407d-bb25-32cc95f44f6d",
                            RoleId = "4482f408-1d74-4dba-9db3-9db676baefc1"
                        },
                        new
                        {
                            UserId = "d08f570e-9c68-4d48-954b-b500d4a8db5d",
                            RoleId = "4482f408-1d74-4dba-9db3-9db676baefc1"
                        },
                        new
                        {
                            UserId = "3a988763-fbce-4d00-adb0-e9932ea86cea",
                            RoleId = "4482f408-1d74-4dba-9db3-9db676baefc1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "700910c3-f628-4991-8b73-886465feda8a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a2714c4-71e9-41f4-a885-b474810df6a2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMc1EsXaRn23pZM9BCYRsesNx0KTxCXl9A37l8qTbHuDGdcoljcb8ub2pZ1sL4OUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41ccf560-8f39-4c45-9573-2fabeedd8650",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "c6050397-b9b2-49ea-b1da-614c40bb7dd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "beac615e-eeb8-47ba-866e-970b77677c77",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFDMIcQk5frqXKAtDIKdSwCHpxnFIRpDGn/XhgxqshNS8lBo4uIrpvk8mjicF4z6NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a6f334-5441-4d7b-b940-353e5fb0d1e7",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюн Сюлейман",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "5a85bdc7-f350-4d0f-ae1d-7dc77f0f8cf4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2d286ad-ffc8-4a18-8cfb-60e07b27863f",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPb2m6bS4OU3zuzSeAX8Xec66cP59v/D1drzmoizvMa24Pp3w/OSWQ0Hoa4pEfHe2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "885f39a5-3c5d-43ab-9e46-b8e6e5ea2c93",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Венцислав Кочанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e5586bfd-2c1a-407d-bb25-32cc95f44f6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "274db227-4a2d-4c67-ac58-6db4f5531b91",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIm64LrLlFcRO8nOWwCOwknbOc1brXrbUbCFXvXFg/k0FlTMm8kaMpNTGynUiOukQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d2dfcb5-f060-4928-bb0e-f11e1b7c5b67",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "d08f570e-9c68-4d48-954b-b500d4a8db5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b24217dc-4514-4060-9f8a-980a1904e255",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9OscQggMN7LznjR8szemOJlTOuvgchyhK7OyZAHd4QnWME2u81BntjdSg9EsM2mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90f755a7-cc31-4aa9-af6e-f130eb9090f1",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Катев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "3a988763-fbce-4d00-adb0-e9932ea86cea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d439c25-6c00-42e5-a5ac-1050d35f4f69",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGI/dsicSeA37AT69TTL5mFIKmsK9+gWkby21wV+Kwm+k8GEm8o8OZLslHZuME+Ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c41e628-24d7-43d4-83bd-ba24f862b23f",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Петкова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "fad9d140-1f06-4b3a-a7e4-82d7cf6f99de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3ababc1-c8af-4afa-911d-c3f011b73dd8",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjMKVEFxnYBFs/CH5XMGLY8ABFPYQ1vRgNxJ2QInsSq49GhwYcIu99K6uEu0OvJKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6c1b091-fbde-4d43-bfbf-b94b82fc615a",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Ахмедов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "f7236521-3161-4174-85dc-475719291f80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d6de250-8195-48f3-a4b7-71c69e6b843c",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENbBFjmvjPX+c1dZHbQ8/g5cVwxjynGegR+WB1iZSoQrKI0Sf2kfa2jQKGp2yzqsgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52b6f56f-ddf2-453e-a99a-a6216bb6958f",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория Петрова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "ca023b61-a4e1-407e-830c-ded191275872",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbc4d0ae-bde1-45f1-b772-0782b26ba0d1",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEh0Q6qvB3tDYC/e1qTjC40s6JtORbTMkpZVJVvuzEH2i+EJ3/ki1GiQXzKGxb83zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdb5aae8-52be-4b84-a1a7-641de7665d63",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Петорв",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "750cb8a2-75ab-4a45-8c0b-4c7e33b3ccfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e980c12-32dc-4af1-b1da-508d918fcac9",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlOVIN12WZkCRgccf2FQt6LfbmH4iLp0WSvUI3DchPcf/l/7Bbg1u+3rcm8sXtHCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "408acf6a-cfe8-4f1e-a502-0962fe9afa22",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана Иванова Колева",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "a05462ee-8ca1-4242-abb2-97d1bb10c715",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27d2422e-30d4-45fd-8285-2572f1d4fc22",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH9ANpOZ4Bl9KvNyrsardPf9DTXmM8JuzD9+SdiZkrwQrfOwUhrjuV4XVj+A+Qni2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a958065a-4df4-40c7-a38c-fd1214fd25ef",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитар Димитров",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "8a1cbdac-c4c2-457b-8fde-88916cafb62f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a8a080e-af31-42b5-8643-1f15191cdd90",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHBTwuCyqQhrZHUunDF2covsq/vVpfDF1j1MuRcyWTSclFnJTamFqSTwmhoK+2TEcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcae1215-f071-4670-8c61-e8afa9946bf8",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Алиев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e171d05e-da91-4e2e-bbd5-f149d4ee1d15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f25d5e5-fddf-4a3e-88f7-a77c06e7c5a3",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ1kcu6Y1vFBvDrfHSt1DpxXZ5M8YznLEAO4Wv7X07IgLXiwc2ulTpVyCRWwe0A+KA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d37c2a4-9596-41a5-ae5f-1d624feeb9cb",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Иванова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "484509aa-0d30-4406-b58b-b6a0678cf7d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "412b3ce1-c570-4c1d-b5aa-e4fc54f111c5",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGDbB+tqFDH0CqTonqBQTSq4y63acQJW5UmM2ua2gh4J2BYZ0ug6fVAZi4eqE8kSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "448fd482-c24e-45a1-b2ea-e3a038c7e7b5",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Манолов Кишанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "51a6291d-4cbb-4eeb-8fed-3b1daea4d18d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbcfcc1d-ebf0-4ec8-99a5-48b540088b82",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGxTip4BSZYXlRU4hRTkaZ9EiCJrtzzyc0GVkf9m/ecDWSoulmWhUFxZUhKyiNugGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30af17dc-a9db-42d7-a5fa-205ea34f768d",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com",
                            FullName = "Иван Петров Иванов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "1b074c6b-7468-4327-9759-7b3525212c79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec1cbd68-8bba-4841-9ff2-25fc6053a61f",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGHVu8QkpSvzieO0MT5SR9nMoOW+MhzvQCvy89CxdjY/0obLckiJ9P1Uj+AdeURDRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2317ad1e-8e07-4261-a973-f5f66ef92527",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com",
                            FullName = "Димитър Димов Барлев",
                            SchoolId = ""
                        });
                });

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240316111139_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Group name.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "f3672841-4dc2-4b55-8d3b-3e56f78165b2",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 11, 38, 40, DateTimeKind.Local).AddTicks(6193),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "e65421e0-a90e-405d-a761-f15f68bf75ce",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 11, 38, 43, DateTimeKind.Local).AddTicks(5711),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "0455c919-ad3b-4603-9baa-cac0208a5c11",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 11, 38, 43, DateTimeKind.Local).AddTicks(5742),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "9c62ea71-0f06-416c-8d1c-382ac892acb9",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 11, 38, 43, DateTimeKind.Local).AddTicks(5749),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "a9a7b1ec-692e-41cc-b521-1e64ddd73bbe",
                            FullName = "baran gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "3e17a227-e346-4a04-860d-b6e28c4fc35b",
                            FullName = "viktoriya gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "b879fc0f-44e8-4cc5-a6a3-832e81b89696",
                            FullName = "daniel gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "5e49c908-03cf-4b0f-95b4-5301aca843d5",
                            FullName = "dimana gmail.com",
                            IsDeleted = false,
                            SchoolId = "0455c919-ad3b-4603-9baa-cac0208a5c11"
                        },
                        new
                        {
                            Id = "34362a1d-141b-4cfa-aa92-f816afc3aec0",
                            FullName = "dimitar gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "07d2e5d1-156f-48ff-92c9-d55d45c7e1db",
                            FullName = "emre gmail.com",
                            IsDeleted = false,
                            SchoolId = "0455c919-ad3b-4603-9baa-cac0208a5c11"
                        },
                        new
                        {
                            Id = "9b95ff4c-478a-4492-a020-dacd7c8df595",
                            FullName = "ivayla gmail.com",
                            IsDeleted = false,
                            SchoolId = "f3672841-4dc2-4b55-8d3b-3e56f78165b2"
                        },
                        new
                        {
                            Id = "8f61b978-f82d-4abc-b63d-55ccddd2498d",
                            FullName = "ivan gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "fe017c0e-3c74-430a-981c-ea951d0d31be",
                            FullName = "ivan_ivanov gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        },
                        new
                        {
                            Id = "335524ea-bb24-46ac-bb4e-f439d90427c5",
                            FullName = "dimitar_barlev gmail.com",
                            IsDeleted = false,
                            SchoolId = "0455c919-ad3b-4603-9baa-cac0208a5c11"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "802e84ea-f4a8-4e65-9bb2-d3c9ee9d77af",
                            FullName = "turhan gmail.com",
                            IsDeleted = false,
                            SchoolId = "0455c919-ad3b-4603-9baa-cac0208a5c11"
                        },
                        new
                        {
                            Id = "7f5298ab-468f-4652-80e6-a18d2fae1647",
                            FullName = "venci gmail.com",
                            IsDeleted = false,
                            SchoolId = "e65421e0-a90e-405d-a761-f15f68bf75ce"
                        },
                        new
                        {
                            Id = "11b3fe50-a330-4457-826f-ccae4a05e4af",
                            FullName = "ahmed gmail.com",
                            IsDeleted = false,
                            SchoolId = "e65421e0-a90e-405d-a761-f15f68bf75ce"
                        },
                        new
                        {
                            Id = "be5daf0d-fac3-4b9d-9146-c3855219b14f",
                            FullName = "martin gmail.com",
                            IsDeleted = false,
                            SchoolId = "0455c919-ad3b-4603-9baa-cac0208a5c11"
                        },
                        new
                        {
                            Id = "8d0f2ed9-aea0-4eea-a1b2-7143c9620f15",
                            FullName = "desi gmail.com",
                            IsDeleted = false,
                            SchoolId = "9c62ea71-0f06-416c-8d1c-382ac892acb9"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated by $.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "af57c95a-c639-4f95-9ba4-3a8dd8c69698",
                            ConcurrencyStamp = "af57c95a-c639-4f95-9ba4-3a8dd8c69698",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3666b71c-48cb-4857-abdc-e9d08cb220ef",
                            ConcurrencyStamp = "3666b71c-48cb-4857-abdc-e9d08cb220ef",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "330a2169-051a-41ec-9598-e50303d0650b",
                            ConcurrencyStamp = "330a2169-051a-41ec-9598-e50303d0650b",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "17d830d3-1c49-46fe-81c1-f7b6647060e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cdb9987-35a8-44d8-ac00-7af033735103",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvCtptusyjtwV90+jolvr21JJnJBeoZs4PgEjTt2c8XHITTwRYe3qQJBQCodH66kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef3060fe-a757-4455-8f54-ce01c54ecc05",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "802e84ea-f4a8-4e65-9bb2-d3c9ee9d77af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a30d83c0-09f6-40b7-96f0-5b85d01767a8",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/UOys+orUEHzUqwFwhRZaw1QweawECwIDxvAE5R7OM0WQo0idvaf2WpchtmUNXrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8674721-89d8-403f-ac43-ef77b531d52f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "7f5298ab-468f-4652-80e6-a18d2fae1647",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39bc5709-5cd8-44eb-a64a-2ecc84ab10f6",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEASMAJiHpW6H2j8gzjb335q+98OABNL707+o/dfX5lvdsB151e2fFGltP04t/Absug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ced1c06-a65f-4dae-882f-30dfe58484a9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "11b3fe50-a330-4457-826f-ccae4a05e4af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0823f962-67c6-41ce-b8ec-876f051d4cae",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENOjuMey1zODmwGAonsfl3tYnBzqKullN6yJZBRleSYSjzKiGs4lEhv5FjFoTH1f5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3391bfcd-c707-4ea9-bc07-d8478b970d14",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "be5daf0d-fac3-4b9d-9146-c3855219b14f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "398d0a1f-820d-45be-bc08-a2ea0399d27b",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEArJWSdaL3SVU55NBpX/Sw0aws7y91sg75Y1UEdPOjidyzmgJMeCD9izJyv2l+H90w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7bdb5bb-d645-430b-87e2-6fe77614cea7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8d0f2ed9-aea0-4eea-a1b2-7143c9620f15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8dc12aa-815b-4a37-9d9d-8d5b3d1e0676",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIoSV0Ng7NzywrxEiT+56+yOY+yeoahlzYhJ+XxGo/WoxSM+DVT0TOsPh+FDa0uW6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "059025c2-765d-4119-932a-bab074b825f8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a9a7b1ec-692e-41cc-b521-1e64ddd73bbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cd9e29e-3fea-44ec-8028-50a7d41196eb",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFG556lgJRoHUOqGJRPDD1W93iEWATEqDeQdW7U534cdCoqE752do6HdtO2J4oNb5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ee83b04-d7bc-4b61-b64f-112026cbccee",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3e17a227-e346-4a04-860d-b6e28c4fc35b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa04def9-f161-4b55-83b9-1438a175095c",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIHtLNamtamqjhhRacxeew96qylfuEpFZE1VzDjqTXMWRN48/abWCv+19E1lrPls0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80fc896e-0a04-4691-b82d-7d58f6112402",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b879fc0f-44e8-4cc5-a6a3-832e81b89696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2baccbb-0921-40e1-a001-44d5704d05c9",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9Yq3+iC9cm3LHL31jQRuJvlhY+DKDUwaf8gK9vUDh0io62KiuPkVjLdrcbg2pDJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70640084-e376-47cb-8825-44ea70a0fa3b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5e49c908-03cf-4b0f-95b4-5301aca843d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb93f056-9b74-41b2-a4f3-746e6c6d0d2f",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9A73cotU8B/G8GpD46WwVq4cuNYY6T5GZWPtBPCzj2ieIY7LvCiXm6plqhhtyMlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41d8b1a0-8ae9-47f6-992a-3fd72f9b9f9c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "34362a1d-141b-4cfa-aa92-f816afc3aec0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34ad539c-f3d8-4cfc-91b6-c488e2c98742",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJjMIdSWimDvkkG5iv+TkaOjmXkWfl+XmIy8LFq4xPNVY2iecZXyC2oIqVWU8Q07Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9eaf5bce-827f-40dc-ae2d-1d9e0270e4fa",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "07d2e5d1-156f-48ff-92c9-d55d45c7e1db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deb0f539-4de4-4210-85b9-22dfcf4ebc80",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEACR/bPiM/qZ5kR/cy06F4eDFxOQXyJ1KutUC2R2SdxX5e1tjlFSbvtiuSRwPfT4Uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c3dbf10-1270-4aae-aba1-cca915a184e5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "9b95ff4c-478a-4492-a020-dacd7c8df595",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10cdb3ee-a962-47ce-8da5-db4b99f6ae0d",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBL7+MIfiIsLmMUdd/TRAHmVjz3rSoJZw6ziUaQkd38sxIf9yjBsr3deCUOHB7Hfzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf958523-502b-42cf-8dd6-d2fc87f6f991",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "8f61b978-f82d-4abc-b63d-55ccddd2498d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89cbdbfd-408f-41e1-9886-c731ea30bd90",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYfYBSr9XD7zQxhRs74n+ghCCy4/HZZhBqI1PaV14538ADhTSGzbDujPLQ3xuI0pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47a0e10f-5a1c-4d2c-aa58-8c1c5edc0f52",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fe017c0e-3c74-430a-981c-ea951d0d31be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f27f3e1-8dc7-4bf0-9de3-aab068c993b0",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7Po4yOfN9BMG2gkyrLYU0bqfF3moWVUfRWU63OBqIfNroo0f2fYZirEKUhjRp0aA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ff9983f-16aa-403d-b18d-39ba8045a4b2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "335524ea-bb24-46ac-bb4e-f439d90427c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad114435-4f02-4821-bc98-c819f6365d0a",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKvbQhMvxAaM7447Z8NEIdRBjFo1FqlK+HkO8/A2ZUvcYXLJP0iPVfd4aTPhL5Tibg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87473e1d-52da-4d8b-9330-75fbf2ed381b",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

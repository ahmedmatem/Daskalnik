// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240316111930_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Group name.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "d199681c-a7d2-49b8-8da4-6b179e3b3a97",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 19, 29, 259, DateTimeKind.Local).AddTicks(1642),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "f1f67cdf-151a-42e3-ae5f-152087365dff",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 19, 29, 261, DateTimeKind.Local).AddTicks(4686),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "860d0f60-2906-45dd-bf8d-0310befac50e",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 19, 29, 261, DateTimeKind.Local).AddTicks(4719),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "618e1296-90f3-4a9c-afb9-637230eb70b1",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 13, 19, 29, 261, DateTimeKind.Local).AddTicks(4725),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "6d8bea14-16a0-484e-8756-9b4cc1e17488",
                            FullName = "baran gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        },
                        new
                        {
                            Id = "23db9d95-de59-4069-bc37-b4d3e218061a",
                            FullName = "viktoriya gmail.com",
                            IsDeleted = false,
                            SchoolId = "d199681c-a7d2-49b8-8da4-6b179e3b3a97"
                        },
                        new
                        {
                            Id = "f8243c34-5ea7-4ef9-a587-a555bf928016",
                            FullName = "daniel gmail.com",
                            IsDeleted = false,
                            SchoolId = "f1f67cdf-151a-42e3-ae5f-152087365dff"
                        },
                        new
                        {
                            Id = "dc2eae77-f2ae-4344-b751-6ce24f6d23bc",
                            FullName = "dimana gmail.com",
                            IsDeleted = false,
                            SchoolId = "d199681c-a7d2-49b8-8da4-6b179e3b3a97"
                        },
                        new
                        {
                            Id = "2e16ded5-1e37-4ef5-9dcf-f80201d254ba",
                            FullName = "dimitar gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        },
                        new
                        {
                            Id = "7ce09d57-6c5b-4331-919d-c7d0a433734c",
                            FullName = "emre gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        },
                        new
                        {
                            Id = "3458f510-3ba9-43a1-8996-0244dc3e50a1",
                            FullName = "ivayla gmail.com",
                            IsDeleted = false,
                            SchoolId = "618e1296-90f3-4a9c-afb9-637230eb70b1"
                        },
                        new
                        {
                            Id = "b2db0b8d-2929-4272-9afd-c818d53c828e",
                            FullName = "ivan gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        },
                        new
                        {
                            Id = "ed93c8cf-c3f0-4421-8a22-c2d120e350de",
                            FullName = "ivan_ivanov gmail.com",
                            IsDeleted = false,
                            SchoolId = "f1f67cdf-151a-42e3-ae5f-152087365dff"
                        },
                        new
                        {
                            Id = "a8916caf-2a6c-421d-94c4-34eebdebd693",
                            FullName = "dimitar_barlev gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "b6561ad2-9dbe-436d-bf44-4e6a2069b407",
                            FullName = "turhan gmail.com",
                            IsDeleted = false,
                            SchoolId = "f1f67cdf-151a-42e3-ae5f-152087365dff"
                        },
                        new
                        {
                            Id = "3862efec-786a-43d9-bdb7-707cba63afdd",
                            FullName = "venci gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        },
                        new
                        {
                            Id = "9671798b-0068-4e79-998d-e53adf05ba97",
                            FullName = "ahmed gmail.com",
                            IsDeleted = false,
                            SchoolId = "f1f67cdf-151a-42e3-ae5f-152087365dff"
                        },
                        new
                        {
                            Id = "9f2f6f0b-5b06-4a23-a288-f778237e4ffb",
                            FullName = "martin gmail.com",
                            IsDeleted = false,
                            SchoolId = "618e1296-90f3-4a9c-afb9-637230eb70b1"
                        },
                        new
                        {
                            Id = "25385708-fc1a-4058-bcfa-e28816d6186b",
                            FullName = "desi gmail.com",
                            IsDeleted = false,
                            SchoolId = "860d0f60-2906-45dd-bf8d-0310befac50e"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated by $.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "170eb1f3-5cae-4c72-98d7-7be660e1a38e",
                            ConcurrencyStamp = "170eb1f3-5cae-4c72-98d7-7be660e1a38e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "26d44ab9-3da3-4012-9353-46a97e2ac08d",
                            ConcurrencyStamp = "26d44ab9-3da3-4012-9353-46a97e2ac08d",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "28821381-cca9-481a-bdef-69dfab9f144f",
                            ConcurrencyStamp = "28821381-cca9-481a-bdef-69dfab9f144f",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e53ed5b-f891-40bc-b0db-603bf459211a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ded16074-64a9-4b6a-8ad4-896c02b1a27c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMCx4YrTfPcT10mgj953lAzHMl+SRQ2O3/YlboWkctwNYOjcq/lM8qlJHBn+BPC5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c519298-d64a-40c1-af73-2d0478d8645e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b6561ad2-9dbe-436d-bf44-4e6a2069b407",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71c0c485-737a-44b8-bd46-dcad98d90cd5",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGw2EaArCZ8cKlDCC6C1MNmCP1BGpv/nRXq1pPnrZMFyYfrj2m5cQ+CqN/Fj1eqCHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5f688ef-2d22-48f8-acb2-1cb1a9772435",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3862efec-786a-43d9-bdb7-707cba63afdd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da3d00a5-bff5-47f3-999e-38c73daf6bf8",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAU7xUc17ZwyytNyhLU32t6Ci40mHdL7Vb4QFzE05zeOXyoLuLzKMPqL23NgEzLUug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e278e24-17a7-4251-b797-37e07d55e424",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "9671798b-0068-4e79-998d-e53adf05ba97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17d27d7c-46c5-4361-a40c-b02f59feab97",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEeIBCGlaUf3sQWcUI8y8ShRaKpvLQDhqp3H0tiaRts7Bd89/5GzgGHhcbcMRwsbXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a5d830e-002a-43b3-8746-38335be40bce",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "9f2f6f0b-5b06-4a23-a288-f778237e4ffb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78d898f8-3b48-4eef-a4d8-2b186936fbff",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENKlGfSGhejKfjbU98F+3nDtqIb8QZETxcpDz/GmueSvTR32GP34+Z9M54rYjvW2ZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68061733-31d8-4cc5-9ebf-19554c684ad8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "25385708-fc1a-4058-bcfa-e28816d6186b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b4a651b-93d9-4e76-aa5c-095ce6df9102",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK4/q79Rz7vdXwG5JS6RdA7KxVoquqM/mUpu2CmbHQqMyNa1cK7UNxDf6Q42F+9UdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d32fbf1-64a0-4b09-84dc-893609c0bdab",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6d8bea14-16a0-484e-8756-9b4cc1e17488",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1895dd54-e701-4446-beaf-224b6c922c19",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHex2cjtxew80a8CRpqjFI3qYsSvv1pzqJITG68mwZlV2jz3JnwysXBaBrNd3dheaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e2da7dc-4c87-4d57-b0fe-b51c673437c4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "23db9d95-de59-4069-bc37-b4d3e218061a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceaddf9c-5541-42ab-9eeb-4533f4ed6d95",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN4/iWqVrBg27SWtfK0Y0M5p/IgiaugW+kxACi1trFMJljbCwpDQjhSxdibr8YijVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "628b5ede-87a5-4661-8ab8-ef9dd45342c6",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f8243c34-5ea7-4ef9-a587-a555bf928016",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf6b262d-9386-49fc-8e87-afc121fe7ccd",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaatbSuJzAIppAhwf4NiaQQqo6bqEPzQbqoN+zEeOIJAd8wU0OVIx1PTyfF3Vq6lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa3007be-392a-441d-b596-0ba915d1c165",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "dc2eae77-f2ae-4344-b751-6ce24f6d23bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6741f64e-ff20-4d3f-aef4-a745b86adaf5",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP8rNi6zVFQY/aGJt0fidQfSAIHVSbMZkbHHBJ0rg6A83akE1VCpOX8a5VgwfVXHLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "321a4b21-483c-4e75-921c-444033aacf23",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2e16ded5-1e37-4ef5-9dcf-f80201d254ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e936e472-2e62-4abc-b1e0-20b5828b745a",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP38D4pasT92lSVflg6ccEzSEY+YWObPC/4KJzSs7eHXS9pwk8AR0JIzxvPRAVmoTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bc7adc1-9bcb-4021-bec7-75f4111e3abf",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "7ce09d57-6c5b-4331-919d-c7d0a433734c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af9a6740-b58f-457e-a623-c36ffb62b81b",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGCAWgAc1Ugsj4uD+ACCDUYrIHemysCLuFzqYnc7xzCJhcR0N0S8LwkHQe0jq3SMnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c6a7ece-59ed-4444-adce-03b28c5bad18",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3458f510-3ba9-43a1-8996-0244dc3e50a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fac3104a-0464-4b45-9f66-4e33859e987f",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVoxAoSCi5kb/PPm1e9pgZDsebThVp2imINbofv9Ns9PY1CUEp7E8Crsaml/P8MTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ac35817-fe80-4bdf-bf16-ee14b797508c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b2db0b8d-2929-4272-9afd-c818d53c828e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a69cfdc-c143-4003-a8b2-f316eb1cde04",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4k5/Zp/WXb+M7XQWvbrH0zN8ZtR3XamYp+uQmlCgeU1ywEAIklOWCImzIcGYGksg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4154d66-e90f-4f1a-b809-055d0b1402b4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ed93c8cf-c3f0-4421-8a22-c2d120e350de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee8c371e-5991-4787-ba05-6e0ac4c107ce",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPdDlm6SDsEknWbcuRygGyglfb5S+C+Rd5jUBQH8riC0MiHzeJpeh4KJ/n33iHjCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09e42466-ae89-4cea-8bd5-1416932fef31",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a8916caf-2a6c-421d-94c4-34eebdebd693",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a756e6d8-db03-4d54-a1a5-26d4ad749727",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM4+yBGciLiwskqLO8gL5/WDh4+k0W8GhVN0fvFq5kiqrLs1xBORcm/GQ61WQzLE8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ebade00-156d-4b1e-b629-2b054cf10e6a",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4e53ed5b-f891-40bc-b0db-603bf459211a",
                            RoleId = "170eb1f3-5cae-4c72-98d7-7be660e1a38e"
                        },
                        new
                        {
                            UserId = "b6561ad2-9dbe-436d-bf44-4e6a2069b407",
                            RoleId = "28821381-cca9-481a-bdef-69dfab9f144f"
                        },
                        new
                        {
                            UserId = "3862efec-786a-43d9-bdb7-707cba63afdd",
                            RoleId = "28821381-cca9-481a-bdef-69dfab9f144f"
                        },
                        new
                        {
                            UserId = "9671798b-0068-4e79-998d-e53adf05ba97",
                            RoleId = "28821381-cca9-481a-bdef-69dfab9f144f"
                        },
                        new
                        {
                            UserId = "9f2f6f0b-5b06-4a23-a288-f778237e4ffb",
                            RoleId = "28821381-cca9-481a-bdef-69dfab9f144f"
                        },
                        new
                        {
                            UserId = "25385708-fc1a-4058-bcfa-e28816d6186b",
                            RoleId = "28821381-cca9-481a-bdef-69dfab9f144f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

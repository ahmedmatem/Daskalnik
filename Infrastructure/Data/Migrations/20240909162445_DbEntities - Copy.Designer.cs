// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240909162445_DbEntities")]
    partial class DbEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "880568aa-2c0c-4bc3-923f-f5d903e0ae3b",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 9, 19, 24, 44, 881, DateTimeKind.Local).AddTicks(8617),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "6e1d0e0d-d05a-46f3-be8d-2a7109fa87bf",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 9, 19, 24, 44, 883, DateTimeKind.Local).AddTicks(4973),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 9, 19, 24, 44, 883, DateTimeKind.Local).AddTicks(4992),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "b3b59005-0a50-4cf3-b694-09b9e374dc32",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 9, 9, 19, 24, 44, 883, DateTimeKind.Local).AddTicks(4996),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "b3fe3d88-7cb7-4e7c-ba81-ccad5f03bfac",
                            FullName = "Баран Ахмедов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "880568aa-2c0c-4bc3-923f-f5d903e0ae3b"
                        },
                        new
                        {
                            Id = "15110ef1-9ae0-4093-8378-f78e3800f8d8",
                            FullName = "Виктория Петрова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "6e1d0e0d-d05a-46f3-be8d-2a7109fa87bf"
                        },
                        new
                        {
                            Id = "2a1f9653-4fa1-40d9-8c07-73f366360559",
                            FullName = "Даниел Петорв",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "880568aa-2c0c-4bc3-923f-f5d903e0ae3b"
                        },
                        new
                        {
                            Id = "e6f92eee-0dd0-4734-bf6e-e387a214978f",
                            FullName = "Димана Иванова Колева",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "b3b59005-0a50-4cf3-b694-09b9e374dc32"
                        },
                        new
                        {
                            Id = "e6da715a-f528-44c5-b7b9-c1018b397b3e",
                            FullName = "Димитар Димитров",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "b3b59005-0a50-4cf3-b694-09b9e374dc32"
                        },
                        new
                        {
                            Id = "63521088-d9b9-4d3b-8f3e-3e75f6b332d9",
                            FullName = "Емре Алиев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec"
                        },
                        new
                        {
                            Id = "5ab4866f-3e51-4ef0-92b8-5551c94bb551",
                            FullName = "Ивайла Иванова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "b3b59005-0a50-4cf3-b694-09b9e374dc32"
                        },
                        new
                        {
                            Id = "91817a45-1f03-4c09-855c-a9d8f8614482",
                            FullName = "Иван Манолов Кишанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec"
                        },
                        new
                        {
                            Id = "2724a9aa-a4ef-494b-b575-b84d2dbbd7bd",
                            FullName = "Иван Петров Иванов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec"
                        },
                        new
                        {
                            Id = "0e6619cd-cfbe-4e0d-a731-b2ac11619ecc",
                            FullName = "Димитър Димов Барлев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "6e1d0e0d-d05a-46f3-be8d-2a7109fa87bf"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "36d9ba03-4021-4cab-b874-2447b8db711d",
                            FullName = "Турхан Мюмюн Сюлейман",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec"
                        },
                        new
                        {
                            Id = "50755eea-f615-4b23-8e70-9a9d3f13fa00",
                            FullName = "Венцислав Кочанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "b3b59005-0a50-4cf3-b694-09b9e374dc32"
                        },
                        new
                        {
                            Id = "3fd65894-6db0-449c-8fcb-cc58989a46ce",
                            FullName = "Ахмед Матем Ахмед",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "6e1d0e0d-d05a-46f3-be8d-2a7109fa87bf"
                        },
                        new
                        {
                            Id = "97807578-dd7b-465c-9d05-2f70f248d3b1",
                            FullName = "Мартин Катев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "6e1d0e0d-d05a-46f3-be8d-2a7109fa87bf"
                        },
                        new
                        {
                            Id = "be20ba94-bc01-4874-9eec-bac2a584a582",
                            FullName = "Десислава Петкова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "85b9cf37-7746-4688-9bc6-eb40ec0c4dec"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "942f7e54-ff0b-4a53-abbc-0d596a286b25",
                            ConcurrencyStamp = "942f7e54-ff0b-4a53-abbc-0d596a286b25",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "19dd1007-5dd9-4dfa-a5b1-a62f585a88b5",
                            ConcurrencyStamp = "19dd1007-5dd9-4dfa-a5b1-a62f585a88b5",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "082fca48-9dbb-4cd4-b701-257f918a7e9c",
                            ConcurrencyStamp = "082fca48-9dbb-4cd4-b701-257f918a7e9c",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3910b414-ac1c-44e5-882f-68ba22322a3b",
                            RoleId = "942f7e54-ff0b-4a53-abbc-0d596a286b25"
                        },
                        new
                        {
                            UserId = "36d9ba03-4021-4cab-b874-2447b8db711d",
                            RoleId = "082fca48-9dbb-4cd4-b701-257f918a7e9c"
                        },
                        new
                        {
                            UserId = "50755eea-f615-4b23-8e70-9a9d3f13fa00",
                            RoleId = "082fca48-9dbb-4cd4-b701-257f918a7e9c"
                        },
                        new
                        {
                            UserId = "3fd65894-6db0-449c-8fcb-cc58989a46ce",
                            RoleId = "082fca48-9dbb-4cd4-b701-257f918a7e9c"
                        },
                        new
                        {
                            UserId = "97807578-dd7b-465c-9d05-2f70f248d3b1",
                            RoleId = "082fca48-9dbb-4cd4-b701-257f918a7e9c"
                        },
                        new
                        {
                            UserId = "be20ba94-bc01-4874-9eec-bac2a584a582",
                            RoleId = "082fca48-9dbb-4cd4-b701-257f918a7e9c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "3910b414-ac1c-44e5-882f-68ba22322a3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01ee5201-0d2b-4c1d-bb73-1a92d3f629d4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAVKFiZwWsMqshqPPyGxWlts6ooeOXwWx1nY1LVq/4hXLgsR94QX0GSAESueXm9DIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82e266f7-10da-4d07-b927-fb0a941409ec",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "36d9ba03-4021-4cab-b874-2447b8db711d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bce0177e-8fe3-493a-b509-a4228d1d9df0",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaU6eZXWrIQNDdBmE2PUySBY0Gm+Q0RheSks+1C9qXB4SIEni3mBP6I99nYB0FRXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45caf5c5-b0cd-4b40-9e36-57333eb1f216",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюн Сюлейман",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "50755eea-f615-4b23-8e70-9a9d3f13fa00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81e6446b-af32-48a6-be61-2495fbbe134b",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENqEH+OXJP9uCaAEy6hY+O5ixhni15S2n13XB3Hts9IzzWA8TJo6vWFIZD8D/9JiJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0997fd26-c0c0-416f-8a9f-28d6d483fed2",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Венцислав Кочанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "3fd65894-6db0-449c-8fcb-cc58989a46ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f889458-1be3-4301-8561-09dd97e8f27a",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXyYmHsyJaIcSqW9FWvEnlRwTaERGv12ySYr2Zyxtt/agJ9fVApR+xeUlB1y+B1jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a7d8414-0809-49a6-94c8-19b2fcaa99e1",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "97807578-dd7b-465c-9d05-2f70f248d3b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f655b4f-ccc7-4168-a152-691480f0698d",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0uKq7JlwC6xvvSwC/dS7lzFDZWY3gfbDL4HZW4YQmDl8jWE3VwnQsqX/MB2RJyIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f796abab-9a4a-436a-bfc0-82394f76ab4b",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Катев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "be20ba94-bc01-4874-9eec-bac2a584a582",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99aba566-5437-4631-a5ab-5a27009e439f",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIV2DBIdpAR/0XpmKjpbdrEXM0wHutTwekNQuhFUmEUz2u5TX/1DA9wQeHo/HJkCgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2babc397-7942-4af7-9846-bbdf696cc33a",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Петкова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "b3fe3d88-7cb7-4e7c-ba81-ccad5f03bfac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd12e139-66cd-4df6-8b7b-7b05aa2933cc",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM4f1eEm3REa6OLpwv2RkYVUQgSVNoRVvScgzJte+i8ckcxpdj7RlIGr9YDOdUMPbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12eec7cb-4e0d-45fe-afea-9879f2e521e5",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Ахмедов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "15110ef1-9ae0-4093-8378-f78e3800f8d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08ef54c9-1f31-4731-8184-99ef3704f574",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAs4Tb5FiAPCCyKY6IqAZObC0W0iEEFlCNEAmvCxC3r02/90IutycqBkhJy5s0Wbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce15f630-e1be-4412-b63b-db7f4377808c",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория Петрова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "2a1f9653-4fa1-40d9-8c07-73f366360559",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9e471b3-c0cd-4bdf-b0c3-2d144347d69d",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+BAGNRTGNdg9GYiiiSruC/XVOVTEgQW2m7LMDHP1d06BQGzDTzYE17tM7En7bZPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48abc4c7-d795-47e2-9b41-89534fc1f24b",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Петорв",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e6f92eee-0dd0-4734-bf6e-e387a214978f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d156c8c-7313-4ec6-bc81-b5d08034092d",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGWnpyO9yCJf2FrKz/q2D7Ro+ssmhkErF82wqFWRJh+/cl7qdYeLqKXHosVQLR6F/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e84679b9-e0ee-4f86-bfb2-9e8b1a4d97e7",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана Иванова Колева",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "e6da715a-f528-44c5-b7b9-c1018b397b3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4248f84-3d68-49cb-a3e8-6745f4d71f0a",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8EVYy5gFKsDfZmtNnXAXDc2NfK05j/0Tb/ytpj0Iot/xB3cNoNINIKtySqflycaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42970a50-a92f-44f7-991f-66c2eebcc9cb",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитар Димитров",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "63521088-d9b9-4d3b-8f3e-3e75f6b332d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ba3b5eb-071c-44f8-a25b-1f0d6b679b20",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmMHGeUjYEAT7c+k23vl+r8C7aZKNxFSHh1XgsnGHjmtTa1K66uMwvVkNjXCBPJsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea6ed455-6461-4c35-98e2-72d6b3b83b54",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Алиев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "5ab4866f-3e51-4ef0-92b8-5551c94bb551",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0982a66-f67e-4704-96e2-df94ed4c4123",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA90fGe8zoLMoaUBfLxYBRvS1fPkLt3eE/XBCVIu1nozkj1h9YvQ37ik5uwCHeEe1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f12774fe-6c0b-48ec-9c1d-ce4161eba9fd",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Иванова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "91817a45-1f03-4c09-855c-a9d8f8614482",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8b762d3-f960-453a-9655-02bdf6032e98",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEARLlv7l8FAdGpNz/oYy+4esyYnS+CXGRWfKpZaqfYEHxqIXvTnMTDS/qNnTsHeIog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2702a44-cc27-4c86-a59c-1dd4d8a39836",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Манолов Кишанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "2724a9aa-a4ef-494b-b575-b84d2dbbd7bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f99861e5-5ccb-4399-8d49-7e7063a0d13c",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELAhMYoRzV8bWmkw9SGhK54lnYNzd9fKngqQp87fy7veM+sGW29nsaZXhbQeQN57VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20bb2946-7e36-4274-ace4-81fe46d760d4",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com",
                            FullName = "Иван Петров Иванов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "0e6619cd-cfbe-4e0d-a731-b2ac11619ecc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d9c7816-7fce-46e3-98d8-786ea98b465c",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdEaApNHQ2704hWzt+v4PjvNw16l/a0ReNc95F0JvPxUUeSEiTauhstQyYOf46NXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14cfcbc4-d98a-45d4-afa4-e6386906906f",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com",
                            FullName = "Димитър Димов Барлев",
                            SchoolId = ""
                        });
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

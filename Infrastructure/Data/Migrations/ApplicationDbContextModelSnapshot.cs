// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Group name.");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "faea6973-8c4a-444b-93e5-0581f0ab1461",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 15, 2, 38, 478, DateTimeKind.Local).AddTicks(7841),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "e06dd70e-c868-45b3-9751-d2a0a05edfe9",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 15, 2, 38, 481, DateTimeKind.Local).AddTicks(956),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "2200d7bb-a22f-4a10-884c-dd610f022685",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 15, 2, 38, 481, DateTimeKind.Local).AddTicks(985),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "60adb11c-9b8d-41a1-b11a-1625ca740653",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 16, 15, 2, 38, 481, DateTimeKind.Local).AddTicks(991),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "ade384a8-d56a-4afd-a5c0-175c5bfbee7d",
                            FullName = "baran gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "faea6973-8c4a-444b-93e5-0581f0ab1461"
                        },
                        new
                        {
                            Id = "69fc8ee2-ccd8-4c68-95b6-596011f1a41b",
                            FullName = "viktoriya gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "0feb53d9-1f13-4631-9c4f-aeb01644f9c4",
                            FullName = "daniel gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2200d7bb-a22f-4a10-884c-dd610f022685"
                        },
                        new
                        {
                            Id = "54821d50-175b-44aa-97b5-08b9d3e0f1ae",
                            FullName = "dimana gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "e06dd70e-c868-45b3-9751-d2a0a05edfe9"
                        },
                        new
                        {
                            Id = "0b2aecc0-430a-4927-bb54-72cd6c6bc464",
                            FullName = "dimitar gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2200d7bb-a22f-4a10-884c-dd610f022685"
                        },
                        new
                        {
                            Id = "6e9db103-833c-47e1-b0e8-83d9944d79af",
                            FullName = "emre gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "00b0eaa1-9af6-4cbf-b3e2-acbb1d350b5f",
                            FullName = "ivayla gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "bcb9f039-ddfd-40fb-911a-6500469b0238",
                            FullName = "ivan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "faea6973-8c4a-444b-93e5-0581f0ab1461"
                        },
                        new
                        {
                            Id = "251665ec-1d98-4fcb-9bd7-48b1e1cf76bb",
                            FullName = "ivan_ivanov gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "5dd9d6a6-f2b1-4d6b-ac2a-44dafe7ea1c6",
                            FullName = "dimitar_barlev gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "e06dd70e-c868-45b3-9751-d2a0a05edfe9"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "223b7481-c8ac-4af2-8753-32304af047aa",
                            FullName = "turhan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2200d7bb-a22f-4a10-884c-dd610f022685"
                        },
                        new
                        {
                            Id = "f5ee6d96-75a4-4819-80fe-ef08a5bc006a",
                            FullName = "venci gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "234e1e36-129e-416d-9280-29d7e5e89fc1",
                            FullName = "ahmed gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "faea6973-8c4a-444b-93e5-0581f0ab1461"
                        },
                        new
                        {
                            Id = "092e7f54-fc45-453f-a9ba-1eee868c31b4",
                            FullName = "martin gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "60adb11c-9b8d-41a1-b11a-1625ca740653"
                        },
                        new
                        {
                            Id = "f321995c-18d2-40c1-83c6-97880c604008",
                            FullName = "desi gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "e06dd70e-c868-45b3-9751-d2a0a05edfe9"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated by $.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7db95640-a187-4319-b1c2-ea450019a264",
                            ConcurrencyStamp = "7db95640-a187-4319-b1c2-ea450019a264",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "02b31407-8d8e-4f11-8d4e-e88473ef7854",
                            ConcurrencyStamp = "02b31407-8d8e-4f11-8d4e-e88473ef7854",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287",
                            ConcurrencyStamp = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b811e640-eb9c-4691-a43a-f9f543aa514a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9d46a46-383c-4e8f-90be-79cc84340b36",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGIRZYnmeZoWp4LSQx85rKsnXU6TvdegoMNUoqayQKHvWoyJE2LLbR9mVx6qqO6hA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa3b14bd-29a2-4920-8c8a-603e7c50f6d4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "223b7481-c8ac-4af2-8753-32304af047aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8127484e-11b4-40ed-a9c5-dc4111f9b110",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGIspN2g0z7SWsXKqzNjGZ/ANEwscN8/NyJ1JesNhAbAB8K1pw4kQnOfIs7T5EHPgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9539c01e-734e-41d7-85c4-8faac999fcba",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f5ee6d96-75a4-4819-80fe-ef08a5bc006a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "761bb4a3-05eb-495d-9e1c-24810be8ee6c",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIOk4kFmWXQxk/eOp30SDBYF7xdF5PebScPvIzPpZ5APFI6U4xrkpoOwqSyPYtrlAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffd581b0-7612-4e6e-8a8a-a47af5bbfd94",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "234e1e36-129e-416d-9280-29d7e5e89fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33ffe2b1-5ccb-41ef-ae20-43f4fd9ee36f",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOkHbpxITTEyEWKozdbAbIvOwQnSdtTtrDmEWcsAm1vpZx89WX4VvacuzOmnUU0HNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d55fef1b-2483-4615-8669-f5c6535a48ac",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "092e7f54-fc45-453f-a9ba-1eee868c31b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3283c680-88f4-4e45-b3ae-05c4630d012a",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENpCozVIVS562TiGUN7TqbDzTUQ023lLG2rGU3lMPIilboWCRyh+5Yo4PsKwHkQNqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89e7bee2-0c3a-4565-9bc9-2c6a811e0f2e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f321995c-18d2-40c1-83c6-97880c604008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0565d8de-95f8-459c-9922-b9d444c09759",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIkYjWWGY/u2HE9Kuxy+lc+nhsP0lmT2rNDQMPGf1e53k9KCrIksQHnwN1etQl006g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1e9fef8-eed7-4d9c-b765-6c30e5c55443",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ade384a8-d56a-4afd-a5c0-175c5bfbee7d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97ecd28d-248d-44ba-b2e9-246989fa1674",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEErxi1wqvUte6oMSBUYe9RQX5gUPo2eLfiOBGddWLXqrL+TxKnJegZLtVwC1kEwpTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "887f1bde-e165-4eb5-ad93-7079be9eaa3c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "69fc8ee2-ccd8-4c68-95b6-596011f1a41b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e43f78e7-47c6-40fe-bc60-9c52672b0c59",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9dfm5JJjx+WbjuZRV0qquH7rb6aUKDwygRN1ScBcFAJm30i+FCXFQTpRM5TuDV0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "299f7ac7-be09-4182-acda-56958195126f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0feb53d9-1f13-4631-9c4f-aeb01644f9c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "852fdf63-6607-4422-9c5e-e8131697dc44",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvXSZ079KhDyCM3KhsGx8qC2qbiC8DQ8HkAjqsZfNtDM7/aAuIaQobZbhV/3/cVSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ae1a848-086d-48d3-8192-c944a238088d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "54821d50-175b-44aa-97b5-08b9d3e0f1ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2646a95f-e41a-4aa9-b9e9-8d33d7eece28",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELQiHx13FYGXhPGlrDbNNL1wVYOx+ZQuzTDXaoUOJU+rEpAo4NH8wAPF6NA2oGvTyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c718e66-e59a-4fde-9956-44e9c9b23884",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "0b2aecc0-430a-4927-bb54-72cd6c6bc464",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c156de4f-b30a-4a57-9c55-2716760d0281",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELfemnx6ZoPQ5Tw204aDpcJoxibdyfidsJlf3wRYvS5hanGx4/CQS9kXAtf1XKcyQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a1cb5fd-fd3b-4297-ad83-752052970ea8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6e9db103-833c-47e1-b0e8-83d9944d79af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d39ef210-cf77-41c3-a122-f5c76bf31e47",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHfMIxleMn73rG6CtCO7QREtlfyoY4q8OEWcPL0PeR72/ZzzhqETRFFc5cXW6j1dUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c2fe133-b082-48cf-838a-1aef593aa085",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "00b0eaa1-9af6-4cbf-b3e2-acbb1d350b5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fd6a29e-9fcd-47e3-8751-4128ed1ff1e9",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELL0wHuUgO1/U4X7rPOvUz9IIMwmBRsb9Za/LT0GzgOV2A/IW95c44AmY/6prNagsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd9cee45-5e56-4d37-8938-c6cff3011466",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "bcb9f039-ddfd-40fb-911a-6500469b0238",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b71bfad-c284-421c-87ae-32155507b25d",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOu8DudpikGXnvXsQii7d3L/hMeVSWPynbPVm/aV9x887BpgF9F1XezYO1vZhv46Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "701487e8-86e0-4391-88f1-7990a15997ef",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "251665ec-1d98-4fcb-9bd7-48b1e1cf76bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82c02628-078b-491c-a5e3-f9e91b907feb",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI6ibBI3NuU+k9bfNunea602KfdHHlK/dNKRWGnid3+8Z7FZJ4kVxB+Pq1cNnGQmKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6354b52-7b03-4c5a-8327-e3c507c96ced",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5dd9d6a6-f2b1-4d6b-ac2a-44dafe7ea1c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3071e072-e93a-490c-a053-112db14cdfe4",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB9Tf46t2YNcSCl8jBeQZ6ugozSDLsFbUuOIaxwA9nOvfbH87NLsYmUuc1STqfA2nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77cb5128-cf02-4e92-8334-4da6d771d158",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b811e640-eb9c-4691-a43a-f9f543aa514a",
                            RoleId = "7db95640-a187-4319-b1c2-ea450019a264"
                        },
                        new
                        {
                            UserId = "223b7481-c8ac-4af2-8753-32304af047aa",
                            RoleId = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287"
                        },
                        new
                        {
                            UserId = "f5ee6d96-75a4-4819-80fe-ef08a5bc006a",
                            RoleId = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287"
                        },
                        new
                        {
                            UserId = "234e1e36-129e-416d-9280-29d7e5e89fc1",
                            RoleId = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287"
                        },
                        new
                        {
                            UserId = "092e7f54-fc45-453f-a9ba-1eee868c31b4",
                            RoleId = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287"
                        },
                        new
                        {
                            UserId = "f321995c-18d2-40c1-83c6-97880c604008",
                            RoleId = "2566f0e9-dd5e-4fe9-a9bb-4838eda2e287"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

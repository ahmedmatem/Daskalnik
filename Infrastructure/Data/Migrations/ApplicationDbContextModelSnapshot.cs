// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsAndStudents");

                    b.HasComment("Many-to-many mapping table for Group and Student.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "f0580e1b-0576-42cd-993f-cf256160c01a",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 28, 21, 12, 39, 178, DateTimeKind.Local).AddTicks(8702),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "97e34800-57ff-45da-9330-af4806a79d43",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 28, 21, 12, 39, 182, DateTimeKind.Local).AddTicks(660),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "943d5ca6-d63a-4cbf-a655-6439d809264c",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 28, 21, 12, 39, 182, DateTimeKind.Local).AddTicks(702),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "2f39db08-d835-4499-a621-d96366de480c",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 3, 28, 21, 12, 39, 182, DateTimeKind.Local).AddTicks(709),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "764379ea-590e-416e-9db2-045e6d31c5e0",
                            FullName = "baran gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2f39db08-d835-4499-a621-d96366de480c"
                        },
                        new
                        {
                            Id = "ea4d2088-225a-4361-871a-dbc497703624",
                            FullName = "viktoriya gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "97e34800-57ff-45da-9330-af4806a79d43"
                        },
                        new
                        {
                            Id = "6ea7281d-741a-4b5b-9fd8-5eb1cdbf777d",
                            FullName = "daniel gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "2f39db08-d835-4499-a621-d96366de480c"
                        },
                        new
                        {
                            Id = "033d4c1c-a5be-439c-a0d8-bbf494f72bff",
                            FullName = "dimana gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "943d5ca6-d63a-4cbf-a655-6439d809264c"
                        },
                        new
                        {
                            Id = "6066824e-f8d2-4291-bad4-5f1725dfde5f",
                            FullName = "dimitar gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "f0580e1b-0576-42cd-993f-cf256160c01a"
                        },
                        new
                        {
                            Id = "92a4bfbf-7747-4feb-a29c-4bc32efb663c",
                            FullName = "emre gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "943d5ca6-d63a-4cbf-a655-6439d809264c"
                        },
                        new
                        {
                            Id = "0c1b6a33-8321-40d5-b639-2dc7542a7ce8",
                            FullName = "ivayla gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "f0580e1b-0576-42cd-993f-cf256160c01a"
                        },
                        new
                        {
                            Id = "17b8a237-a7d2-4722-abe5-f10f3b4bdfd7",
                            FullName = "ivan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "97e34800-57ff-45da-9330-af4806a79d43"
                        },
                        new
                        {
                            Id = "3203c148-9b8d-485c-bd81-1d6c2d112158",
                            FullName = "ivan_ivanov gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "943d5ca6-d63a-4cbf-a655-6439d809264c"
                        },
                        new
                        {
                            Id = "09f9f1f2-f222-43df-ac60-21be98cb0a8f",
                            FullName = "dimitar_barlev gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "f0580e1b-0576-42cd-993f-cf256160c01a"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "b4b4985a-b755-46e3-b389-dac3994f0968",
                            FullName = "turhan gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "f0580e1b-0576-42cd-993f-cf256160c01a"
                        },
                        new
                        {
                            Id = "9f1db2de-911e-4965-8807-8461723f6772",
                            FullName = "venci gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "97e34800-57ff-45da-9330-af4806a79d43"
                        },
                        new
                        {
                            Id = "ea3e6c24-2488-4459-8cc3-986419094e99",
                            FullName = "ahmed gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "97e34800-57ff-45da-9330-af4806a79d43"
                        },
                        new
                        {
                            Id = "ce9a8715-f0a0-49d8-a861-8ff457e302e1",
                            FullName = "martin gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "943d5ca6-d63a-4cbf-a655-6439d809264c"
                        },
                        new
                        {
                            Id = "53c7de2b-08b6-47b3-80f7-eb02285a2351",
                            FullName = "desi gmail.com",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "943d5ca6-d63a-4cbf-a655-6439d809264c"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creater of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60d3c983-f1c2-4933-8830-5ab7a3c1e065",
                            ConcurrencyStamp = "60d3c983-f1c2-4933-8830-5ab7a3c1e065",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dc5729cf-9280-4221-a545-1f41528be7b0",
                            ConcurrencyStamp = "dc5729cf-9280-4221-a545-1f41528be7b0",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "28c02cf1-57c5-466d-b9f8-f3de352319a5",
                            ConcurrencyStamp = "28c02cf1-57c5-466d-b9f8-f3de352319a5",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "248bbfb1-7b12-4b42-a0b7-d6d75c15980d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00d0d1b4-a36f-47bf-b993-d2bdc0f7f9b7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMeUGBQaI3cSOaceuyBAhTvPhA+kxNdUP6IS0rla/92mWOv7x+bSaFnAwLXkQvlgpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95dfd25b-3f1d-44dc-a942-f0457d2d4e26",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "b4b4985a-b755-46e3-b389-dac3994f0968",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6afdfc45-661c-4959-95d7-54b38fece061",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECTET6+LGx+3nUrVKegWFiV//xGEkXf4iJpvya6Gs/epT1BNL96ZTSfCLoodK/j4lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "476b4b62-e2a4-438a-b8a1-e56f5c08f5e3",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com"
                        },
                        new
                        {
                            Id = "9f1db2de-911e-4965-8807-8461723f6772",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09da722b-6563-4eed-8950-73dde33b1f4d",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcJMXVwG0CFQMyLcke12vwupPjkpE0ULCrOs4paijzdyziA438Vf3S0dMz4RGouBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b852956d-08be-4c6f-ac63-0d0f7f746d99",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com"
                        },
                        new
                        {
                            Id = "ea3e6c24-2488-4459-8cc3-986419094e99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32ecefdc-64cb-4046-ab34-152e5a955352",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJNdRQgVZ+JbvJ3CfdUkUIRWZ6NBiKKpuub5/sSTj54lW4m6m/GZ/YoQsaaLWAxROA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c398c9d0-40c6-4335-8543-b6837098fe39",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com"
                        },
                        new
                        {
                            Id = "ce9a8715-f0a0-49d8-a861-8ff457e302e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "900569ed-d05b-4750-a3cc-735ba4dd257c",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKE6sEi2lCbM2+3dGokWkFECsllou+MSI42kjxTZR8qOvEQF3F50aewJSbRKl++c9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e384c2f-6bd0-4295-aa19-db9c821385b8",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com"
                        },
                        new
                        {
                            Id = "53c7de2b-08b6-47b3-80f7-eb02285a2351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a2d392a-3b32-4e8a-a8b5-7a06e8918db5",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8TIQC+dRqKdcco7bcyFm3KufLDUt9v+zF91yOwJW1MLjgIBhY7auttAIJAF4H/qQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "059fdeab-04b9-4b99-afbb-51c1b74a1d80",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com"
                        },
                        new
                        {
                            Id = "764379ea-590e-416e-9db2-045e6d31c5e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a311b8f-77cc-4111-91dd-b3df2a305817",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnjEo3iMNO4+QbC0KYVZmR4m7eBeHXfiYptrxZHKakHv0Y5FdBQ/iWq0Hx1nSKjRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92696beb-cca9-4465-ba25-2debd6a7bd8e",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com"
                        },
                        new
                        {
                            Id = "ea4d2088-225a-4361-871a-dbc497703624",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dffeb0a-7003-4201-94bf-ed30b389de3a",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEApRKgAYx15yIHqR8Yz+mcG6TAdiQnOnD6ywaeQDS2vrhrc4d4FAw4IbSiS5JwaiWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61b6ff80-9976-4b60-9ed0-6f120aad1708",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com"
                        },
                        new
                        {
                            Id = "6ea7281d-741a-4b5b-9fd8-5eb1cdbf777d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f482c236-24d0-42c9-a37f-3c42a6d27371",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIVeu2FOv03Gr5/uvcZvZ2sJzSmBvyPDWDEDtvmwdj/scyT3WYAZ1Hpp9lKlod06A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42e960d9-e642-496f-998b-9452eb56080e",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com"
                        },
                        new
                        {
                            Id = "033d4c1c-a5be-439c-a0d8-bbf494f72bff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc953d06-f88e-40e8-9f5c-8a0b12cb0200",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6JeiRmbgAgd7yv4d6B5y9IP1YBDwXfYe6lRf+IVEWfXl0hJThEmhLZGW1iRp+6OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76508805-92f9-45f9-8c9a-480172821a6a",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com"
                        },
                        new
                        {
                            Id = "6066824e-f8d2-4291-bad4-5f1725dfde5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ab4a83c-7d96-4ef1-89e7-014f2781c609",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBnOnnzXFnZhAbY0eCGE0go9MBHlID6d1MPMdq+IBGYWsCqts5pNPJmzKwCcnTB8mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "430d6a46-a23c-406c-bc7f-418464b32646",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com"
                        },
                        new
                        {
                            Id = "92a4bfbf-7747-4feb-a29c-4bc32efb663c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f99f8bb3-971c-4274-b082-15590345d4bb",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHC5dV5sMtnvoiOUIBZ0hSU2obatQtkwgZgr66ZGzUYHkPc/1Et3tCUcGhhdiBROsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb13b77f-d1b0-47bd-9913-59d23d6792f4",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com"
                        },
                        new
                        {
                            Id = "0c1b6a33-8321-40d5-b639-2dc7542a7ce8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "454833be-460a-4b33-a4fd-8e14ac437e52",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDzYV8oaDrjNSi8xDmbtpDipRoFfT3qBYVycbTCfi8SJMMa+gqk3gUFC56e4xz7JEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28489ca1-bfec-4f13-a44a-a09ecfbca170",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com"
                        },
                        new
                        {
                            Id = "17b8a237-a7d2-4722-abe5-f10f3b4bdfd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a26026b9-0a59-4220-8356-453733f05b16",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFvZZrlvBWt0YJeOU653ho8ABNjs8Vtve+COJbuthav1qwP6iz2Hmqzcj+eX9lF48Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77d88667-03c9-42ff-9a0f-2283e36a492b",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com"
                        },
                        new
                        {
                            Id = "3203c148-9b8d-485c-bd81-1d6c2d112158",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e177732-c8eb-46a1-8793-0bd99782da45",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKi/kucnX6FrGtkgRn2IgCM0JcA79a0Usx6xLKdhSMxYKV7UviHuLkbrKNsgWB5wug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e996fa2-78de-4299-9eee-e0aaefa9e740",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "09f9f1f2-f222-43df-ac60-21be98cb0a8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c40dc6db-06ab-4467-ad1f-8c0204620e33",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWbaNxxV1CdKKb6Aea5XY0Wg2PuJ31OE6Lr+4WwCW9LWfKk+QTcNqgm07aamA6hfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "575e80f6-3ade-4240-9d40-209c56c5f5d7",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "248bbfb1-7b12-4b42-a0b7-d6d75c15980d",
                            RoleId = "60d3c983-f1c2-4933-8830-5ab7a3c1e065"
                        },
                        new
                        {
                            UserId = "b4b4985a-b755-46e3-b389-dac3994f0968",
                            RoleId = "28c02cf1-57c5-466d-b9f8-f3de352319a5"
                        },
                        new
                        {
                            UserId = "9f1db2de-911e-4965-8807-8461723f6772",
                            RoleId = "28c02cf1-57c5-466d-b9f8-f3de352319a5"
                        },
                        new
                        {
                            UserId = "ea3e6c24-2488-4459-8cc3-986419094e99",
                            RoleId = "28c02cf1-57c5-466d-b9f8-f3de352319a5"
                        },
                        new
                        {
                            UserId = "ce9a8715-f0a0-49d8-a861-8ff457e302e1",
                            RoleId = "28c02cf1-57c5-466d-b9f8-f3de352319a5"
                        },
                        new
                        {
                            UserId = "53c7de2b-08b6-47b3-80f7-eb02285a2351",
                            RoleId = "28c02cf1-57c5-466d-b9f8-f3de352319a5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany("Groups")
                        .HasForeignKey("StudentId");

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}

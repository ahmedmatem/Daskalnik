// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241002194735_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.Property<string>("ExamsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExamsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ExamGroup");
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("GroupStudent");
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TopicsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("GroupTopic");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the exam.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Exam description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Exam name");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Part of primary key");

                    b.HasKey("ExamId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ExamsAndResources");

                    b.HasComment("Many-to-many mapping table for Exam and Resource.");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Group description.");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Group icon url.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Group name.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("School identifier in which the group belongs to. ");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("Group short name.");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Group creater identifier.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the resource.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("IconRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Resource icon reference.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Link to resource.");

                    b.Property<string>("TextToDisplay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Resource text to display.");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComment("The name of the city the school belongs to.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("School name.");

                    b.Property<string>("SchoolAdminId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("String type refers to teacher with SchoolAdmin role(null – school has no administrator yet).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasComment("School type identifier - например: ОУ, ППМГ, ГПЕЧЕ.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolAdminId")
                        .IsUnique()
                        .HasFilter("[SchoolAdminId] IS NOT NULL");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = "26b9a064-4555-405b-b9bb-9f73b7034cd4",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 22, 47, 35, 127, DateTimeKind.Local).AddTicks(1510),
                            IsDeleted = false,
                            Name = "Акад. Никола Обрешков",
                            Type = "ППМГ"
                        },
                        new
                        {
                            Id = "84673595-e4b7-48c3-93f8-6b807dfc88ed",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 22, 47, 35, 128, DateTimeKind.Local).AddTicks(8209),
                            IsDeleted = true,
                            Name = "Никола Йонков Вапцаров",
                            Type = "ОУ"
                        },
                        new
                        {
                            Id = "edc7be68-581f-44d6-a3ea-97dee817d9c5",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 22, 47, 35, 128, DateTimeKind.Local).AddTicks(8235),
                            IsDeleted = true,
                            Name = "Екзарх Йосиф",
                            Type = "ГПИЧЕ"
                        },
                        new
                        {
                            Id = "309f641d-87a8-4f6f-b630-8b644af07327",
                            City = "Разград",
                            CreatedOn = new DateTime(2024, 10, 2, 22, 47, 35, 128, DateTimeKind.Local).AddTicks(8242),
                            IsDeleted = false,
                            Name = "Васил Левски",
                            Type = "ОУ"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of school the student attends.");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "66b4bd09-c4e7-48c7-aa5e-1b51bfedabc3",
                            FullName = "Баран Ахмедов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "58b9b798-4bfd-4020-9f1c-d18cea5c26dd",
                            FullName = "Виктория Петрова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "26b9a064-4555-405b-b9bb-9f73b7034cd4"
                        },
                        new
                        {
                            Id = "14b6b98c-0fe6-4aea-9345-42d73c4e96f4",
                            FullName = "Даниел Петорв",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "bcaa87ed-0ef5-4b82-93b1-0a8097929ee6",
                            FullName = "Димана Иванова Колева",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "edc7be68-581f-44d6-a3ea-97dee817d9c5"
                        },
                        new
                        {
                            Id = "abd73db0-cc1f-44f3-a168-9a92fa747366",
                            FullName = "Димитар Димитров",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "edc7be68-581f-44d6-a3ea-97dee817d9c5"
                        },
                        new
                        {
                            Id = "39be133b-be50-45ff-8fd1-8c794f62b77f",
                            FullName = "Емре Алиев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "84673595-e4b7-48c3-93f8-6b807dfc88ed"
                        },
                        new
                        {
                            Id = "ed8ebdc7-2f5f-41aa-8846-671c146bfba7",
                            FullName = "Ивайла Иванова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "f8800467-2f41-4a91-92c8-06142c745293",
                            FullName = "Иван Манолов Кишанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "56aeffdb-3732-4f7a-885d-e977189782be",
                            FullName = "Иван Петров Иванов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "0ede3570-b23a-4f9b-b74e-6b0553478e0e",
                            FullName = "Димитър Димов Барлев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<DateTime?>("ActivetedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the person activation date.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher full name.");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Indicate person as activated ot not.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of school the teacher attends.");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "be62ac44-656f-48a1-93b5-575343a81e79",
                            FullName = "Турхан Мюмюн Сюлейман",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "edc7be68-581f-44d6-a3ea-97dee817d9c5"
                        },
                        new
                        {
                            Id = "12df63ca-89f6-4882-8623-4be0bb7c58a6",
                            FullName = "Венцислав Кочанов",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        },
                        new
                        {
                            Id = "6681a0b0-1a6b-4c31-955f-8f4b3357cfbd",
                            FullName = "Ахмед Матем Ахмед",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "84673595-e4b7-48c3-93f8-6b807dfc88ed"
                        },
                        new
                        {
                            Id = "8bc0db3b-7c30-42bf-95f7-bcb70e8e030c",
                            FullName = "Мартин Катев",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "edc7be68-581f-44d6-a3ea-97dee817d9c5"
                        },
                        new
                        {
                            Id = "953b466b-7e35-4b86-ba5e-0a34a6b2e8e2",
                            FullName = "Десислава Петкова",
                            IsActivated = false,
                            IsDeleted = false,
                            SchoolId = "309f641d-87a8-4f6f-b630-8b644af07327"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique data model identifier.");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Topic contents items separated each in a new line.");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of created the record on in the table.");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier of the creator of the topic.");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of deleting the record in the table.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Topic description.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicate a record in table as deleted or not.");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Mark the date of last modifing the record in the table.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Topic name");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key.");

                    b.HasKey("TopicId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TopicsAndResources");

                    b.HasComment("Many-to-many mapping table for Topic and Resource.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "91dfeda0-63c1-4868-aaf4-2f9e6f88d7a9",
                            ConcurrencyStamp = "91dfeda0-63c1-4868-aaf4-2f9e6f88d7a9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d8c3ec69-f366-4376-ba30-09fef73d3564",
                            ConcurrencyStamp = "d8c3ec69-f366-4376-ba30-09fef73d3564",
                            Name = "SchoolAdmin",
                            NormalizedName = "SCHOOLADMIN"
                        },
                        new
                        {
                            Id = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca",
                            ConcurrencyStamp = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "74c99182-7dd6-473e-ab4f-bd641fa5856a",
                            RoleId = "91dfeda0-63c1-4868-aaf4-2f9e6f88d7a9"
                        },
                        new
                        {
                            UserId = "be62ac44-656f-48a1-93b5-575343a81e79",
                            RoleId = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca"
                        },
                        new
                        {
                            UserId = "12df63ca-89f6-4882-8623-4be0bb7c58a6",
                            RoleId = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca"
                        },
                        new
                        {
                            UserId = "6681a0b0-1a6b-4c31-955f-8f4b3357cfbd",
                            RoleId = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca"
                        },
                        new
                        {
                            UserId = "8bc0db3b-7c30-42bf-95f7-bcb70e8e030c",
                            RoleId = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca"
                        },
                        new
                        {
                            UserId = "953b466b-7e35-4b86-ba5e-0a34a6b2e8e2",
                            RoleId = "1fb7250d-5a3d-4ef3-a2cb-cf8ab5c526ca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "74c99182-7dd6-473e-ab4f-bd641fa5856a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4f9b32f-41d4-4d4f-99b3-1db94874a84a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKUE9hdX4S/fIZVOpQ3aK7U3f94J8zDjh1qOr7c6meXsVQXOIgrC8ToUi3exCITuFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f8044b4-293c-4e34-a821-937884ff8500",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "be62ac44-656f-48a1-93b5-575343a81e79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f9c367c-f5a4-482a-ba61-2d12f51951be",
                            Email = "turhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TURHAN@GMAIL.COM",
                            NormalizedUserName = "TURHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkxCCZHD/V9ZYYM/Rdp3gkRd/8ZvUkdjm2eNcZreRZTT30YQpguz3vt5NvnKnZIeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b74fb596-3f64-442a-a90c-f0200b403e81",
                            TwoFactorEnabled = false,
                            UserName = "turhan@gmail.com",
                            FullName = "Турхан Мюмюн Сюлейман",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "12df63ca-89f6-4882-8623-4be0bb7c58a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfbd97da-e10a-446b-a4dc-af46d932806b",
                            Email = "venci@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENCI@GMAIL.COM",
                            NormalizedUserName = "VENCI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKRKKo8xL0rUBHHDo8Ce5mHw0mQXDgxdT7Cc3JeBLpemB7hZGKFk2tn7o2w6fQQMIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71a471fd-9632-4048-a852-b58dd6b1fc68",
                            TwoFactorEnabled = false,
                            UserName = "venci@gmail.com",
                            FullName = "Венцислав Кочанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "6681a0b0-1a6b-4c31-955f-8f4b3357cfbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99201c61-bec1-419a-9dd4-91950da8130a",
                            Email = "ahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@GMAIL.COM",
                            NormalizedUserName = "AHMED@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKzuOWuUAq1JvBEvZUBbQ4cxruaf9QIHeLYTBHEbsRY89LQLBUmvPELxKSA8dOX3ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6edc750-ee3e-4ddb-9c6c-e0b8a9e41f88",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@gmail.com",
                            FullName = "Ахмед Матем Ахмед",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "8bc0db3b-7c30-42bf-95f7-bcb70e8e030c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e70e4d94-32d7-4dca-891d-8aa8070fac02",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEmEhyWVejxCsBnC3IHesYn9yN25D3Ad3E7NL10rYU/TL7VadkISKDUYfZtDxxMmWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e278ff32-0d8c-4a9d-b617-d2f3d1523a8a",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            FullName = "Мартин Катев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "953b466b-7e35-4b86-ba5e-0a34a6b2e8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c0125b3-1f08-40de-bd3e-724a14f2642c",
                            Email = "desi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESI@GMAIL.COM",
                            NormalizedUserName = "DESI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvj9d/KnQQrRowUTZVkPtE09dZwYPLINMgRbSR0ZJ4g1UsgOIe/SqctvrDNadVd2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d72f678b-1335-4f96-b5f5-cbe7a19107d1",
                            TwoFactorEnabled = false,
                            UserName = "desi@gmail.com",
                            FullName = "Десислава Петкова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "66b4bd09-c4e7-48c7-aa5e-1b51bfedabc3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfab21d8-c273-4aad-9ca1-59d27d20ba05",
                            Email = "baran@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BARAN@GMAIL.COM",
                            NormalizedUserName = "BARAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEItFoV3E/Qcbj0f0eUKXKZ0QIrY/Qs0xGlye3jk2OwzSVGIvI5GQfGxP3o9c8/hKhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46556fdf-570a-4848-8923-8c638995b92b",
                            TwoFactorEnabled = false,
                            UserName = "baran@gmail.com",
                            FullName = "Баран Ахмедов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "58b9b798-4bfd-4020-9f1c-d18cea5c26dd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae6453b5-9519-42f1-9ff3-77b9785d26a7",
                            Email = "viktoriya@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTORIYA@GMAIL.COM",
                            NormalizedUserName = "VIKTORIYA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBYzW3COneNkPhL6p/PsBVDkIJCSq9dvjcBDY9VmHueXKuIn6zHCUpy5UgU2xr08FA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e52f2e0-8d3f-4089-8e6c-4f93d4621a52",
                            TwoFactorEnabled = false,
                            UserName = "viktoriya@gmail.com",
                            FullName = "Виктория Петрова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "14b6b98c-0fe6-4aea-9345-42d73c4e96f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21983a4a-38e1-4677-b453-61e9ce36d831",
                            Email = "daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAAagV7Vhq7eu4dlPYLkTvFgurAt5LfDwaZOKtle4aIDgdiPekaOn3Gwbgxa8EJDlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "717aa254-d5ea-4e55-ab8d-711afb843f27",
                            TwoFactorEnabled = false,
                            UserName = "daniel@gmail.com",
                            FullName = "Даниел Петорв",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "bcaa87ed-0ef5-4b82-93b1-0a8097929ee6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8cc25bd-5fc9-4ca5-89de-97459290b9a6",
                            Email = "dimana@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMANA@GMAIL.COM",
                            NormalizedUserName = "DIMANA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECNVu7q/ZGgnHaCfPUqqzToHClAKknty/EGf/sYTqlj9Yk3ttS5+ZaOXIEBtSqen8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa4e43bc-5274-4cd3-bede-52c738b1d86b",
                            TwoFactorEnabled = false,
                            UserName = "dimana@gmail.com",
                            FullName = "Димана Иванова Колева",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "abd73db0-cc1f-44f3-a168-9a92fa747366",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a16df1fe-b197-4b0d-ac1c-076c8bfa049d",
                            Email = "dimitar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@GMAIL.COM",
                            NormalizedUserName = "DIMITAR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED92H3ovQIQy+ZaoEfrw8G4dTHGVQRvajMcLgnN0nYthn6kkFHtBOTi3fe2Ms6Iqfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b9a2380-53ad-45d1-8147-6644939dbaa6",
                            TwoFactorEnabled = false,
                            UserName = "dimitar@gmail.com",
                            FullName = "Димитар Димитров",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "39be133b-be50-45ff-8fd1-8c794f62b77f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "279dcaa8-a13c-4585-b1fa-cec6b194ef5c",
                            Email = "emre@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@GMAIL.COM",
                            NormalizedUserName = "EMRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7K5JWQsMiUVRMswBVxFKRHEUstbC4jPd2ThPoEgrA10jeWP8qLC4bA/Y5DzmBStg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f9d18f7-5260-4133-9f05-304d938ae565",
                            TwoFactorEnabled = false,
                            UserName = "emre@gmail.com",
                            FullName = "Емре Алиев",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "ed8ebdc7-2f5f-41aa-8846-671c146bfba7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "385cba24-438f-4e6b-a68c-0d7e9b54b059",
                            Email = "ivayla@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLA@GMAIL.COM",
                            NormalizedUserName = "IVAYLA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHd0cWemTJQigote1fEw0KK5U39XB1LjO2iuqJf3fPOWMfRrV+6/W4OVv8gwIE+toA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e4767c3-1391-4ca1-a04c-8f42cf290778",
                            TwoFactorEnabled = false,
                            UserName = "ivayla@gmail.com",
                            FullName = "Ивайла Иванова",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "f8800467-2f41-4a91-92c8-06142c745293",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "483a06b2-2000-484b-ab3c-53495f376bc3",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcMBP3XHdcQ4T43cqLMMLkYUiu/pC5nrpeTqXEJC5kkc7SVs5g761R/pAF4pHoUWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6e21423-2658-4f22-b791-d06b6855d8a5",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            FullName = "Иван Манолов Кишанов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "56aeffdb-3732-4f7a-885d-e977189782be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf4a61e1-0428-4e0a-8c38-f20c701094e7",
                            Email = "ivan_ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN_IVANOV@GMAIL.COM",
                            NormalizedUserName = "IVAN_IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEND159GYOsyPa0p7LF8h+eZROIAIWw7lxB2WDQDuYPb0jeOY5S4C7hetsAygtNZJNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87e87d99-50a9-4b39-9b05-8cd5d716390f",
                            TwoFactorEnabled = false,
                            UserName = "ivan_ivanov@gmail.com",
                            FullName = "Иван Петров Иванов",
                            SchoolId = ""
                        },
                        new
                        {
                            Id = "0ede3570-b23a-4f9b-b74e-6b0553478e0e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8715b915-f2d4-42b2-af94-b0e5e6d3a59f",
                            Email = "dimitar_barlev@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR_BARLEV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR_BARLEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFAAEzfM0Wm3wldbnUwdEeIqt85b8kaUTyh3DfFw3FdF5Oo77oESrBE4eU3GLVBGGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be4679b9-9a56-45ab-9790-f6ec045e1fdf",
                            TwoFactorEnabled = false,
                            UserName = "dimitar_barlev@gmail.com",
                            FullName = "Димитър Димов Барлев",
                            SchoolId = ""
                        });
                });

            modelBuilder.Entity("ExamGroup", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTopic", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.ExamResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Group", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Teacher", "SchoolAdmin")
                        .WithOne("School")
                        .HasForeignKey("Infrastructure.Data.Models.School", "SchoolAdminId");

                    b.Navigation("SchoolAdmin");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.TopicResource", b =>
                {
                    b.HasOne("Infrastructure.Data.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Resources")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
